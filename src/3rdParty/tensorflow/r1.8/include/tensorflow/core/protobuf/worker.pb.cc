// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/worker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/worker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class GetStatusRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetStatusRequest>
     _instance;
} _GetStatusRequest_default_instance_;
class GetStatusResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetStatusResponse>
     _instance;
} _GetStatusResponse_default_instance_;
class CreateWorkerSessionRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateWorkerSessionRequest>
     _instance;
} _CreateWorkerSessionRequest_default_instance_;
class CreateWorkerSessionResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateWorkerSessionResponse>
     _instance;
} _CreateWorkerSessionResponse_default_instance_;
class DeleteWorkerSessionRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteWorkerSessionRequest>
     _instance;
} _DeleteWorkerSessionRequest_default_instance_;
class DeleteWorkerSessionResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteWorkerSessionResponse>
     _instance;
} _DeleteWorkerSessionResponse_default_instance_;
class RegisterGraphRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegisterGraphRequest>
     _instance;
} _RegisterGraphRequest_default_instance_;
class RegisterGraphResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegisterGraphResponse>
     _instance;
} _RegisterGraphResponse_default_instance_;
class DeregisterGraphRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeregisterGraphRequest>
     _instance;
} _DeregisterGraphRequest_default_instance_;
class DeregisterGraphResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeregisterGraphResponse>
     _instance;
} _DeregisterGraphResponse_default_instance_;
class CleanupAllRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CleanupAllRequest>
     _instance;
} _CleanupAllRequest_default_instance_;
class CleanupAllResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CleanupAllResponse>
     _instance;
} _CleanupAllResponse_default_instance_;
class ExecutorOptsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExecutorOpts>
     _instance;
} _ExecutorOpts_default_instance_;
class RunGraphRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RunGraphRequest>
     _instance;
} _RunGraphRequest_default_instance_;
class RunGraphResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RunGraphResponse>
     _instance;
} _RunGraphResponse_default_instance_;
class CleanupGraphRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CleanupGraphRequest>
     _instance;
} _CleanupGraphRequest_default_instance_;
class CleanupGraphResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CleanupGraphResponse>
     _instance;
} _CleanupGraphResponse_default_instance_;
class RecvTensorRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecvTensorRequest>
     _instance;
} _RecvTensorRequest_default_instance_;
class RecvTensorResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecvTensorResponse>
     _instance;
} _RecvTensorResponse_default_instance_;
class LoggingRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoggingRequest>
     _instance;
} _LoggingRequest_default_instance_;
class LabeledStepStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LabeledStepStats>
     _instance;
} _LabeledStepStats_default_instance_;
class LoggingResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoggingResponse>
     _instance;
} _LoggingResponse_default_instance_;
class TraceOptsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TraceOpts>
     _instance;
} _TraceOpts_default_instance_;
class TracingRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TracingRequest>
     _instance;
} _TracingRequest_default_instance_;
class TracingResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TracingResponse>
     _instance;
} _TracingResponse_default_instance_;

namespace protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[25];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatusResponse, device_attributes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, session_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, server_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, isolate_session_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteWorkerSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteWorkerSessionRequest, session_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteWorkerSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, session_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, graph_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, has_control_flow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, graph_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, debug_options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphResponse, graph_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphRequest, session_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphRequest, graph_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupAllRequest, container_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupAllResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, record_costs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, record_timeline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, record_partition_graphs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, report_tensor_allocations_upon_oom_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, session_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, graph_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, step_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, exec_opts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, send_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, recv_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, is_partial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, is_last_partial_run_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, store_errors_in_response_body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, step_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, cost_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, partition_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, status_error_message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupGraphRequest, step_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, step_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, rendezvous_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, dma_ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, client_locality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, server_locality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, transport_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, request_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, tensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, is_dead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, send_start_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, transport_options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, rpc_logging_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, clear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, fetch_step_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledStepStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledStepStats, step_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledStepStats, step_stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingResponse, step_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_step_profiler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_kernel_profiler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_extended_profiler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_gpu_profiler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_sample_profiler_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingRequest, options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(GetStatusRequest)},
  { 5, -1, sizeof(GetStatusResponse)},
  { 11, -1, sizeof(CreateWorkerSessionRequest)},
  { 19, -1, sizeof(CreateWorkerSessionResponse)},
  { 24, -1, sizeof(DeleteWorkerSessionRequest)},
  { 30, -1, sizeof(DeleteWorkerSessionResponse)},
  { 35, -1, sizeof(RegisterGraphRequest)},
  { 45, -1, sizeof(RegisterGraphResponse)},
  { 51, -1, sizeof(DeregisterGraphRequest)},
  { 58, -1, sizeof(DeregisterGraphResponse)},
  { 63, -1, sizeof(CleanupAllRequest)},
  { 69, -1, sizeof(CleanupAllResponse)},
  { 74, -1, sizeof(ExecutorOpts)},
  { 83, -1, sizeof(RunGraphRequest)},
  { 97, -1, sizeof(RunGraphResponse)},
  { 108, -1, sizeof(CleanupGraphRequest)},
  { 114, -1, sizeof(CleanupGraphResponse)},
  { 119, -1, sizeof(RecvTensorRequest)},
  { 131, -1, sizeof(RecvTensorResponse)},
  { 140, -1, sizeof(LoggingRequest)},
  { 148, -1, sizeof(LabeledStepStats)},
  { 155, -1, sizeof(LoggingResponse)},
  { 161, -1, sizeof(TraceOpts)},
  { 172, -1, sizeof(TracingRequest)},
  { 178, -1, sizeof(TracingResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateWorkerSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateWorkerSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteWorkerSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteWorkerSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegisterGraphRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegisterGraphResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeregisterGraphRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeregisterGraphResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CleanupAllRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CleanupAllResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecutorOpts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RunGraphRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RunGraphResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CleanupGraphRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CleanupGraphResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecvTensorRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecvTensorResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoggingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabeledStepStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoggingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TraceOpts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TracingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TracingResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/protobuf/worker.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto::InitDefaults();
  ::tensorflow::error::protobuf_tensorflow_2fcore_2flib_2fcore_2ferror_5fcodes_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::InitDefaults();
  _GetStatusRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetStatusRequest_default_instance_);_GetStatusResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetStatusResponse_default_instance_);_CreateWorkerSessionRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateWorkerSessionRequest_default_instance_);_CreateWorkerSessionResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateWorkerSessionResponse_default_instance_);_DeleteWorkerSessionRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteWorkerSessionRequest_default_instance_);_DeleteWorkerSessionResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteWorkerSessionResponse_default_instance_);_RegisterGraphRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegisterGraphRequest_default_instance_);_RegisterGraphResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegisterGraphResponse_default_instance_);_DeregisterGraphRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeregisterGraphRequest_default_instance_);_DeregisterGraphResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeregisterGraphResponse_default_instance_);_CleanupAllRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CleanupAllRequest_default_instance_);_CleanupAllResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CleanupAllResponse_default_instance_);_ExecutorOpts_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExecutorOpts_default_instance_);_RunGraphRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RunGraphRequest_default_instance_);_RunGraphResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RunGraphResponse_default_instance_);_CleanupGraphRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CleanupGraphRequest_default_instance_);_CleanupGraphResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CleanupGraphResponse_default_instance_);_RecvTensorRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecvTensorRequest_default_instance_);_RecvTensorResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecvTensorResponse_default_instance_);_LoggingRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoggingRequest_default_instance_);_LabeledStepStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LabeledStepStats_default_instance_);_LoggingResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoggingResponse_default_instance_);_TraceOpts_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TraceOpts_default_instance_);_TracingRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TracingRequest_default_instance_);_TracingResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TracingResponse_default_instance_);_CreateWorkerSessionRequest_default_instance_._instance.get_mutable()->server_def_ = const_cast< ::tensorflow::ServerDef*>(
      ::tensorflow::ServerDef::internal_default_instance());
  _RegisterGraphRequest_default_instance_._instance.get_mutable()->graph_def_ = const_cast< ::tensorflow::GraphDef*>(
      ::tensorflow::GraphDef::internal_default_instance());
  _RegisterGraphRequest_default_instance_._instance.get_mutable()->graph_options_ = const_cast< ::tensorflow::GraphOptions*>(
      ::tensorflow::GraphOptions::internal_default_instance());
  _RegisterGraphRequest_default_instance_._instance.get_mutable()->debug_options_ = const_cast< ::tensorflow::DebugOptions*>(
      ::tensorflow::DebugOptions::internal_default_instance());
  _RunGraphRequest_default_instance_._instance.get_mutable()->exec_opts_ = const_cast< ::tensorflow::ExecutorOpts*>(
      ::tensorflow::ExecutorOpts::internal_default_instance());
  _RunGraphResponse_default_instance_._instance.get_mutable()->step_stats_ = const_cast< ::tensorflow::StepStats*>(
      ::tensorflow::StepStats::internal_default_instance());
  _RunGraphResponse_default_instance_._instance.get_mutable()->cost_graph_ = const_cast< ::tensorflow::CostGraphDef*>(
      ::tensorflow::CostGraphDef::internal_default_instance());
  _RecvTensorRequest_default_instance_._instance.get_mutable()->client_locality_ = const_cast< ::tensorflow::DeviceLocality*>(
      ::tensorflow::DeviceLocality::internal_default_instance());
  _RecvTensorRequest_default_instance_._instance.get_mutable()->server_locality_ = const_cast< ::tensorflow::DeviceLocality*>(
      ::tensorflow::DeviceLocality::internal_default_instance());
  _RecvTensorRequest_default_instance_._instance.get_mutable()->transport_options_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _RecvTensorResponse_default_instance_._instance.get_mutable()->tensor_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
  _RecvTensorResponse_default_instance_._instance.get_mutable()->transport_options_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _LabeledStepStats_default_instance_._instance.get_mutable()->step_stats_ = const_cast< ::tensorflow::StepStats*>(
      ::tensorflow::StepStats::internal_default_instance());
  _TracingRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::tensorflow::TraceOpts*>(
      ::tensorflow::TraceOpts::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%tensorflow/core/protobuf/worker.proto\022"
      "\ntensorflow\032\031google/protobuf/any.proto\032*"
      "tensorflow/core/framework/cost_graph.pro"
      "to\032*tensorflow/core/framework/step_stats"
      ".proto\0321tensorflow/core/framework/device"
      "_attributes.proto\032%tensorflow/core/frame"
      "work/graph.proto\032&tensorflow/core/framew"
      "ork/tensor.proto\032*tensorflow/core/lib/co"
      "re/error_codes.proto\032%tensorflow/core/pr"
      "otobuf/config.proto\032$tensorflow/core/pro"
      "tobuf/debug.proto\032+tensorflow/core/proto"
      "buf/named_tensor.proto\0320tensorflow/core/"
      "protobuf/tensorflow_server.proto\"\022\n\020GetS"
      "tatusRequest\"L\n\021GetStatusResponse\0227\n\021dev"
      "ice_attributes\030\001 \003(\0132\034.tensorflow.Device"
      "Attributes\"~\n\032CreateWorkerSessionRequest"
      "\022\026\n\016session_handle\030\001 \001(\t\022)\n\nserver_def\030\002"
      " \001(\0132\025.tensorflow.ServerDef\022\035\n\025isolate_s"
      "ession_state\030\003 \001(\010\"\035\n\033CreateWorkerSessio"
      "nResponse\"4\n\032DeleteWorkerSessionRequest\022"
      "\026\n\016session_handle\030\001 \001(\t\"\035\n\033DeleteWorkerS"
      "essionResponse\"\327\001\n\024RegisterGraphRequest\022"
      "\026\n\016session_handle\030\001 \001(\t\022\'\n\tgraph_def\030\002 \001"
      "(\0132\024.tensorflow.GraphDef\022\034\n\020has_control_"
      "flow\030\003 \001(\010B\002\030\001\022/\n\rgraph_options\030\004 \001(\0132\030."
      "tensorflow.GraphOptions\022/\n\rdebug_options"
      "\030\005 \001(\0132\030.tensorflow.DebugOptions\"-\n\025Regi"
      "sterGraphResponse\022\024\n\014graph_handle\030\001 \001(\t\""
      "F\n\026DeregisterGraphRequest\022\026\n\016session_han"
      "dle\030\002 \001(\t\022\024\n\014graph_handle\030\001 \001(\t\"\031\n\027Dereg"
      "isterGraphResponse\"&\n\021CleanupAllRequest\022"
      "\021\n\tcontainer\030\001 \003(\t\"\024\n\022CleanupAllResponse"
      "\"\212\001\n\014ExecutorOpts\022\024\n\014record_costs\030\001 \001(\010\022"
      "\027\n\017record_timeline\030\003 \001(\010\022\037\n\027record_parti"
      "tion_graphs\030\004 \001(\010\022*\n\"report_tensor_alloc"
      "ations_upon_oom\030\005 \001(\010\"\223\002\n\017RunGraphReques"
      "t\022\026\n\016session_handle\030\010 \001(\t\022\024\n\014graph_handl"
      "e\030\001 \001(\t\022\017\n\007step_id\030\002 \001(\003\022+\n\texec_opts\030\005 "
      "\001(\0132\030.tensorflow.ExecutorOpts\022*\n\004send\030\003 "
      "\003(\0132\034.tensorflow.NamedTensorProto\022\020\n\010rec"
      "v_key\030\004 \003(\t\022\022\n\nis_partial\030\006 \001(\010\022\033\n\023is_la"
      "st_partial_run\030\007 \001(\010\022%\n\035store_errors_in_"
      "response_body\030\t \001(\010\"\221\002\n\020RunGraphResponse"
      "\022*\n\004recv\030\001 \003(\0132\034.tensorflow.NamedTensorP"
      "roto\022)\n\nstep_stats\030\002 \001(\0132\025.tensorflow.St"
      "epStats\022,\n\ncost_graph\030\003 \001(\0132\030.tensorflow"
      ".CostGraphDef\022-\n\017partition_graph\030\004 \003(\0132\024"
      ".tensorflow.GraphDef\022+\n\013status_code\030\005 \001("
      "\0162\026.tensorflow.error.Code\022\034\n\024status_erro"
      "r_message\030\006 \001(\t\"&\n\023CleanupGraphRequest\022\017"
      "\n\007step_id\030\001 \001(\003\"\026\n\024CleanupGraphResponse\""
      "\373\001\n\021RecvTensorRequest\022\017\n\007step_id\030\001 \001(\003\022\026"
      "\n\016rendezvous_key\030\002 \001(\t\022\016\n\006dma_ok\030\003 \001(\010\0223"
      "\n\017client_locality\030\004 \001(\0132\032.tensorflow.Dev"
      "iceLocality\0223\n\017server_locality\030\005 \001(\0132\032.t"
      "ensorflow.DeviceLocality\022/\n\021transport_op"
      "tions\030\006 \001(\0132\024.google.protobuf.Any\022\022\n\nreq"
      "uest_id\030\007 \001(\003\"\232\001\n\022RecvTensorResponse\022\'\n\006"
      "tensor\030\001 \001(\0132\027.tensorflow.TensorProto\022\017\n"
      "\007is_dead\030\002 \001(\010\022\031\n\021send_start_micros\030\003 \001("
      "\003\022/\n\021transport_options\030\004 \001(\0132\024.google.pr"
      "otobuf.Any\"K\n\016LoggingRequest\022\023\n\013rpc_logg"
      "ing\030\001 \001(\010\022\r\n\005clear\030\002 \001(\010\022\025\n\rfetch_step_i"
      "d\030\003 \003(\003\"N\n\020LabeledStepStats\022\017\n\007step_id\030\001"
      " \001(\003\022)\n\nstep_stats\030\002 \001(\0132\025.tensorflow.St"
      "epStats\"=\n\017LoggingResponse\022*\n\004step\030\001 \003(\013"
      "2\034.tensorflow.LabeledStepStats\"\253\001\n\tTrace"
      "Opts\022\020\n\010duration\030\001 \001(\001\022\031\n\021use_step_profi"
      "ler\030\002 \001(\010\022\033\n\023use_kernel_profiler\030\003 \001(\010\022\035"
      "\n\025use_extended_profiler\030\004 \001(\010\022\030\n\020use_gpu"
      "_profiler\030\005 \001(\010\022\033\n\023use_sample_profiler\030\006"
      " \001(\010\"8\n\016TracingRequest\022&\n\007options\030\001 \001(\0132"
      "\025.tensorflow.TraceOpts\"\021\n\017TracingRespons"
      "eB/\n\032org.tensorflow.distruntimeB\014WorkerP"
      "rotosP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2978);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/worker.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fgraph_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto::AddDescriptors();
  ::tensorflow::error::protobuf_tensorflow_2fcore_2flib_2fcore_2ferror_5fcodes_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStatusRequest::GetStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStatusRequest)
}
GetStatusRequest::GetStatusRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStatusRequest)
}
GetStatusRequest::GetStatusRequest(const GetStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStatusRequest)
}

void GetStatusRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetStatusRequest::~GetStatusRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStatusRequest)
  SharedDtor();
}

void GetStatusRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void GetStatusRequest::ArenaDtor(void* object) {
  GetStatusRequest* _this = reinterpret_cast< GetStatusRequest* >(object);
  (void)_this;
}
void GetStatusRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStatusRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetStatusRequest& GetStatusRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStatusRequest* GetStatusRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStatusRequest>(arena);
}

void GetStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStatusRequest)
  return false;
#undef DO_
}

void GetStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GetStatusRequest)
}

::google::protobuf::uint8* GetStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStatusRequest)
  return target;
}

size_t GetStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStatusRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStatusRequest)
    MergeFrom(*source);
  }
}

void GetStatusRequest::MergeFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusRequest::CopyFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusRequest::IsInitialized() const {
  return true;
}

void GetStatusRequest::Swap(GetStatusRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStatusRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStatusRequest::UnsafeArenaSwap(GetStatusRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStatusRequest::InternalSwap(GetStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStatusRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStatusRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStatusResponse::kDeviceAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStatusResponse::GetStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStatusResponse)
}
GetStatusResponse::GetStatusResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  device_attributes_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStatusResponse)
}
GetStatusResponse::GetStatusResponse(const GetStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      device_attributes_(from.device_attributes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStatusResponse)
}

void GetStatusResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetStatusResponse::~GetStatusResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStatusResponse)
  SharedDtor();
}

void GetStatusResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void GetStatusResponse::ArenaDtor(void* object) {
  GetStatusResponse* _this = reinterpret_cast< GetStatusResponse* >(object);
  (void)_this;
}
void GetStatusResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStatusResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetStatusResponse& GetStatusResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStatusResponse* GetStatusResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStatusResponse>(arena);
}

void GetStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_attributes_.Clear();
  _internal_metadata_.Clear();
}

bool GetStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStatusResponse)
  return false;
#undef DO_
}

void GetStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_attributes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device_attributes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GetStatusResponse)
}

::google::protobuf::uint8* GetStatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_attributes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->device_attributes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStatusResponse)
  return target;
}

size_t GetStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStatusResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->device_attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_attributes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStatusResponse)
    MergeFrom(*source);
  }
}

void GetStatusResponse::MergeFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_attributes_.MergeFrom(from.device_attributes_);
}

void GetStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusResponse::CopyFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusResponse::IsInitialized() const {
  return true;
}

void GetStatusResponse::Swap(GetStatusResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStatusResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStatusResponse::UnsafeArenaSwap(GetStatusResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStatusResponse::InternalSwap(GetStatusResponse* other) {
  using std::swap;
  device_attributes_.InternalSwap(&other->device_attributes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStatusResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStatusResponse

// repeated .tensorflow.DeviceAttributes device_attributes = 1;
int GetStatusResponse::device_attributes_size() const {
  return device_attributes_.size();
}
void GetStatusResponse::clear_device_attributes() {
  device_attributes_.Clear();
}
const ::tensorflow::DeviceAttributes& GetStatusResponse::device_attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GetStatusResponse.device_attributes)
  return device_attributes_.Get(index);
}
::tensorflow::DeviceAttributes* GetStatusResponse::mutable_device_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GetStatusResponse.device_attributes)
  return device_attributes_.Mutable(index);
}
::tensorflow::DeviceAttributes* GetStatusResponse::add_device_attributes() {
  // @@protoc_insertion_point(field_add:tensorflow.GetStatusResponse.device_attributes)
  return device_attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
GetStatusResponse::mutable_device_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GetStatusResponse.device_attributes)
  return &device_attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
GetStatusResponse::device_attributes() const {
  // @@protoc_insertion_point(field_list:tensorflow.GetStatusResponse.device_attributes)
  return device_attributes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateWorkerSessionRequest::_slow_mutable_server_def() {
  server_def_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ServerDef >(
      GetArenaNoVirtual());
}
::tensorflow::ServerDef* CreateWorkerSessionRequest::_slow_release_server_def() {
  if (server_def_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ServerDef* temp = new ::tensorflow::ServerDef(*server_def_);
    server_def_ = NULL;
    return temp;
  }
}
::tensorflow::ServerDef* CreateWorkerSessionRequest::unsafe_arena_release_server_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateWorkerSessionRequest.server_def)
  
  ::tensorflow::ServerDef* temp = server_def_;
  server_def_ = NULL;
  return temp;
}
void CreateWorkerSessionRequest::_slow_set_allocated_server_def(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ServerDef** server_def) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*server_def) == NULL) {
      message_arena->Own(*server_def);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*server_def)) {
      ::tensorflow::ServerDef* new_server_def = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ServerDef >(
            message_arena);
      new_server_def->CopyFrom(**server_def);
      *server_def = new_server_def;
    }
}
void CreateWorkerSessionRequest::unsafe_arena_set_allocated_server_def(
    ::tensorflow::ServerDef* server_def) {
  if (GetArenaNoVirtual() == NULL) {
    delete server_def_;
  }
  server_def_ = server_def;
  if (server_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateWorkerSessionRequest.server_def)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateWorkerSessionRequest::kSessionHandleFieldNumber;
const int CreateWorkerSessionRequest::kServerDefFieldNumber;
const int CreateWorkerSessionRequest::kIsolateSessionStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWorkerSessionRequest::CreateWorkerSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateWorkerSessionRequest)
}
CreateWorkerSessionRequest::CreateWorkerSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateWorkerSessionRequest)
}
CreateWorkerSessionRequest::CreateWorkerSessionRequest(const CreateWorkerSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_server_def()) {
    server_def_ = new ::tensorflow::ServerDef(*from.server_def_);
  } else {
    server_def_ = NULL;
  }
  isolate_session_state_ = from.isolate_session_state_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateWorkerSessionRequest)
}

void CreateWorkerSessionRequest::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isolate_session_state_) -
      reinterpret_cast<char*>(&server_def_)) + sizeof(isolate_session_state_));
  _cached_size_ = 0;
}

CreateWorkerSessionRequest::~CreateWorkerSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateWorkerSessionRequest)
  SharedDtor();
}

void CreateWorkerSessionRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete server_def_;
}

void CreateWorkerSessionRequest::ArenaDtor(void* object) {
  CreateWorkerSessionRequest* _this = reinterpret_cast< CreateWorkerSessionRequest* >(object);
  (void)_this;
}
void CreateWorkerSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateWorkerSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateWorkerSessionRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateWorkerSessionRequest& CreateWorkerSessionRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateWorkerSessionRequest* CreateWorkerSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateWorkerSessionRequest>(arena);
}

void CreateWorkerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateWorkerSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && server_def_ != NULL) {
    delete server_def_;
  }
  server_def_ = NULL;
  isolate_session_state_ = false;
  _internal_metadata_.Clear();
}

bool CreateWorkerSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateWorkerSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CreateWorkerSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ServerDef server_def = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isolate_session_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isolate_session_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateWorkerSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateWorkerSessionRequest)
  return false;
#undef DO_
}

void CreateWorkerSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateWorkerSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateWorkerSessionRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // .tensorflow.ServerDef server_def = 2;
  if (this->has_server_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->server_def_, output);
  }

  // bool isolate_session_state = 3;
  if (this->isolate_session_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isolate_session_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CreateWorkerSessionRequest)
}

::google::protobuf::uint8* CreateWorkerSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateWorkerSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateWorkerSessionRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // .tensorflow.ServerDef server_def = 2;
  if (this->has_server_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->server_def_, deterministic, target);
  }

  // bool isolate_session_state = 3;
  if (this->isolate_session_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isolate_session_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateWorkerSessionRequest)
  return target;
}

size_t CreateWorkerSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateWorkerSessionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // .tensorflow.ServerDef server_def = 2;
  if (this->has_server_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_def_);
  }

  // bool isolate_session_state = 3;
  if (this->isolate_session_state() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateWorkerSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateWorkerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWorkerSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateWorkerSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateWorkerSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateWorkerSessionRequest)
    MergeFrom(*source);
  }
}

void CreateWorkerSessionRequest::MergeFrom(const CreateWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateWorkerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_server_def()) {
    mutable_server_def()->::tensorflow::ServerDef::MergeFrom(from.server_def());
  }
  if (from.isolate_session_state() != 0) {
    set_isolate_session_state(from.isolate_session_state());
  }
}

void CreateWorkerSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWorkerSessionRequest::CopyFrom(const CreateWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorkerSessionRequest::IsInitialized() const {
  return true;
}

void CreateWorkerSessionRequest::Swap(CreateWorkerSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateWorkerSessionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateWorkerSessionRequest::UnsafeArenaSwap(CreateWorkerSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateWorkerSessionRequest::InternalSwap(CreateWorkerSessionRequest* other) {
  using std::swap;
  session_handle_.Swap(&other->session_handle_);
  swap(server_def_, other->server_def_);
  swap(isolate_session_state_, other->isolate_session_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateWorkerSessionRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateWorkerSessionRequest

// string session_handle = 1;
void CreateWorkerSessionRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateWorkerSessionRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateWorkerSessionRequest.session_handle)
  return session_handle_.Get();
}
void CreateWorkerSessionRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CreateWorkerSessionRequest.session_handle)
}
#if LANG_CXX11
void CreateWorkerSessionRequest::set_session_handle(::std::string&& value) {
  
  session_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.CreateWorkerSessionRequest.session_handle)
}
#endif
void CreateWorkerSessionRequest::set_session_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CreateWorkerSessionRequest.session_handle)
}
void CreateWorkerSessionRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CreateWorkerSessionRequest.session_handle)
}
::std::string* CreateWorkerSessionRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateWorkerSessionRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateWorkerSessionRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateWorkerSessionRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateWorkerSessionRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateWorkerSessionRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateWorkerSessionRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateWorkerSessionRequest.session_handle)
}
void CreateWorkerSessionRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateWorkerSessionRequest.session_handle)
}

// .tensorflow.ServerDef server_def = 2;
bool CreateWorkerSessionRequest::has_server_def() const {
  return this != internal_default_instance() && server_def_ != NULL;
}
void CreateWorkerSessionRequest::clear_server_def() {
  if (GetArenaNoVirtual() == NULL && server_def_ != NULL) delete server_def_;
  server_def_ = NULL;
}
const ::tensorflow::ServerDef& CreateWorkerSessionRequest::server_def() const {
  const ::tensorflow::ServerDef* p = server_def_;
  // @@protoc_insertion_point(field_get:tensorflow.CreateWorkerSessionRequest.server_def)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::ServerDef*>(
      &::tensorflow::_ServerDef_default_instance_);
}
::tensorflow::ServerDef* CreateWorkerSessionRequest::mutable_server_def() {
  
  if (server_def_ == NULL) {
    _slow_mutable_server_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateWorkerSessionRequest.server_def)
  return server_def_;
}
::tensorflow::ServerDef* CreateWorkerSessionRequest::release_server_def() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateWorkerSessionRequest.server_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_server_def();
  } else {
    ::tensorflow::ServerDef* temp = server_def_;
    server_def_ = NULL;
    return temp;
  }
}
 void CreateWorkerSessionRequest::set_allocated_server_def(::tensorflow::ServerDef* server_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_def_;
  }
  if (server_def != NULL) {
    _slow_set_allocated_server_def(message_arena, &server_def);
  }
  server_def_ = server_def;
  if (server_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateWorkerSessionRequest.server_def)
}

// bool isolate_session_state = 3;
void CreateWorkerSessionRequest::clear_isolate_session_state() {
  isolate_session_state_ = false;
}
bool CreateWorkerSessionRequest::isolate_session_state() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateWorkerSessionRequest.isolate_session_state)
  return isolate_session_state_;
}
void CreateWorkerSessionRequest::set_isolate_session_state(bool value) {
  
  isolate_session_state_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CreateWorkerSessionRequest.isolate_session_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWorkerSessionResponse::CreateWorkerSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateWorkerSessionResponse)
}
CreateWorkerSessionResponse::CreateWorkerSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateWorkerSessionResponse)
}
CreateWorkerSessionResponse::CreateWorkerSessionResponse(const CreateWorkerSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateWorkerSessionResponse)
}

void CreateWorkerSessionResponse::SharedCtor() {
  _cached_size_ = 0;
}

CreateWorkerSessionResponse::~CreateWorkerSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateWorkerSessionResponse)
  SharedDtor();
}

void CreateWorkerSessionResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void CreateWorkerSessionResponse::ArenaDtor(void* object) {
  CreateWorkerSessionResponse* _this = reinterpret_cast< CreateWorkerSessionResponse* >(object);
  (void)_this;
}
void CreateWorkerSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateWorkerSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateWorkerSessionResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateWorkerSessionResponse& CreateWorkerSessionResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateWorkerSessionResponse* CreateWorkerSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateWorkerSessionResponse>(arena);
}

void CreateWorkerSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateWorkerSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CreateWorkerSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateWorkerSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateWorkerSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateWorkerSessionResponse)
  return false;
#undef DO_
}

void CreateWorkerSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateWorkerSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CreateWorkerSessionResponse)
}

::google::protobuf::uint8* CreateWorkerSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateWorkerSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateWorkerSessionResponse)
  return target;
}

size_t CreateWorkerSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateWorkerSessionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateWorkerSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateWorkerSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWorkerSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateWorkerSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateWorkerSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateWorkerSessionResponse)
    MergeFrom(*source);
  }
}

void CreateWorkerSessionResponse::MergeFrom(const CreateWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateWorkerSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateWorkerSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWorkerSessionResponse::CopyFrom(const CreateWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorkerSessionResponse::IsInitialized() const {
  return true;
}

void CreateWorkerSessionResponse::Swap(CreateWorkerSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateWorkerSessionResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateWorkerSessionResponse::UnsafeArenaSwap(CreateWorkerSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateWorkerSessionResponse::InternalSwap(CreateWorkerSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateWorkerSessionResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateWorkerSessionResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteWorkerSessionRequest::kSessionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteWorkerSessionRequest::DeleteWorkerSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeleteWorkerSessionRequest)
}
DeleteWorkerSessionRequest::DeleteWorkerSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeleteWorkerSessionRequest)
}
DeleteWorkerSessionRequest::DeleteWorkerSessionRequest(const DeleteWorkerSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeleteWorkerSessionRequest)
}

void DeleteWorkerSessionRequest::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteWorkerSessionRequest::~DeleteWorkerSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.DeleteWorkerSessionRequest)
  SharedDtor();
}

void DeleteWorkerSessionRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeleteWorkerSessionRequest::ArenaDtor(void* object) {
  DeleteWorkerSessionRequest* _this = reinterpret_cast< DeleteWorkerSessionRequest* >(object);
  (void)_this;
}
void DeleteWorkerSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteWorkerSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteWorkerSessionRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteWorkerSessionRequest& DeleteWorkerSessionRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteWorkerSessionRequest* DeleteWorkerSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteWorkerSessionRequest>(arena);
}

void DeleteWorkerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeleteWorkerSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteWorkerSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeleteWorkerSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeleteWorkerSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeleteWorkerSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeleteWorkerSessionRequest)
  return false;
#undef DO_
}

void DeleteWorkerSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeleteWorkerSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeleteWorkerSessionRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.DeleteWorkerSessionRequest)
}

::google::protobuf::uint8* DeleteWorkerSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeleteWorkerSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeleteWorkerSessionRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeleteWorkerSessionRequest)
  return target;
}

size_t DeleteWorkerSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeleteWorkerSessionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteWorkerSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeleteWorkerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteWorkerSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteWorkerSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeleteWorkerSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeleteWorkerSessionRequest)
    MergeFrom(*source);
  }
}

void DeleteWorkerSessionRequest::MergeFrom(const DeleteWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeleteWorkerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
}

void DeleteWorkerSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeleteWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkerSessionRequest::CopyFrom(const DeleteWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeleteWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkerSessionRequest::IsInitialized() const {
  return true;
}

void DeleteWorkerSessionRequest::Swap(DeleteWorkerSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteWorkerSessionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteWorkerSessionRequest::UnsafeArenaSwap(DeleteWorkerSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteWorkerSessionRequest::InternalSwap(DeleteWorkerSessionRequest* other) {
  using std::swap;
  session_handle_.Swap(&other->session_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteWorkerSessionRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteWorkerSessionRequest

// string session_handle = 1;
void DeleteWorkerSessionRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeleteWorkerSessionRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeleteWorkerSessionRequest.session_handle)
  return session_handle_.Get();
}
void DeleteWorkerSessionRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeleteWorkerSessionRequest.session_handle)
}
#if LANG_CXX11
void DeleteWorkerSessionRequest::set_session_handle(::std::string&& value) {
  
  session_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.DeleteWorkerSessionRequest.session_handle)
}
#endif
void DeleteWorkerSessionRequest::set_session_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeleteWorkerSessionRequest.session_handle)
}
void DeleteWorkerSessionRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeleteWorkerSessionRequest.session_handle)
}
::std::string* DeleteWorkerSessionRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeleteWorkerSessionRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteWorkerSessionRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.DeleteWorkerSessionRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeleteWorkerSessionRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeleteWorkerSessionRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeleteWorkerSessionRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeleteWorkerSessionRequest.session_handle)
}
void DeleteWorkerSessionRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeleteWorkerSessionRequest.session_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteWorkerSessionResponse::DeleteWorkerSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeleteWorkerSessionResponse)
}
DeleteWorkerSessionResponse::DeleteWorkerSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeleteWorkerSessionResponse)
}
DeleteWorkerSessionResponse::DeleteWorkerSessionResponse(const DeleteWorkerSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeleteWorkerSessionResponse)
}

void DeleteWorkerSessionResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteWorkerSessionResponse::~DeleteWorkerSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.DeleteWorkerSessionResponse)
  SharedDtor();
}

void DeleteWorkerSessionResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DeleteWorkerSessionResponse::ArenaDtor(void* object) {
  DeleteWorkerSessionResponse* _this = reinterpret_cast< DeleteWorkerSessionResponse* >(object);
  (void)_this;
}
void DeleteWorkerSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteWorkerSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteWorkerSessionResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteWorkerSessionResponse& DeleteWorkerSessionResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteWorkerSessionResponse* DeleteWorkerSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteWorkerSessionResponse>(arena);
}

void DeleteWorkerSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeleteWorkerSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeleteWorkerSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeleteWorkerSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeleteWorkerSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeleteWorkerSessionResponse)
  return false;
#undef DO_
}

void DeleteWorkerSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeleteWorkerSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.DeleteWorkerSessionResponse)
}

::google::protobuf::uint8* DeleteWorkerSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeleteWorkerSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeleteWorkerSessionResponse)
  return target;
}

size_t DeleteWorkerSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeleteWorkerSessionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteWorkerSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeleteWorkerSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteWorkerSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteWorkerSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeleteWorkerSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeleteWorkerSessionResponse)
    MergeFrom(*source);
  }
}

void DeleteWorkerSessionResponse::MergeFrom(const DeleteWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeleteWorkerSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteWorkerSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeleteWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkerSessionResponse::CopyFrom(const DeleteWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeleteWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkerSessionResponse::IsInitialized() const {
  return true;
}

void DeleteWorkerSessionResponse::Swap(DeleteWorkerSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteWorkerSessionResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteWorkerSessionResponse::UnsafeArenaSwap(DeleteWorkerSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteWorkerSessionResponse::InternalSwap(DeleteWorkerSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteWorkerSessionResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteWorkerSessionResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RegisterGraphRequest::_slow_mutable_graph_def() {
  graph_def_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::GraphDef* RegisterGraphRequest::_slow_release_graph_def() {
  if (graph_def_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphDef* temp = new ::tensorflow::GraphDef(*graph_def_);
    graph_def_ = NULL;
    return temp;
  }
}
::tensorflow::GraphDef* RegisterGraphRequest::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphRequest.graph_def)
  
  ::tensorflow::GraphDef* temp = graph_def_;
  graph_def_ = NULL;
  return temp;
}
void RegisterGraphRequest::_slow_set_allocated_graph_def(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** graph_def) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*graph_def) == NULL) {
      message_arena->Own(*graph_def);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*graph_def)) {
      ::tensorflow::GraphDef* new_graph_def = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
            message_arena);
      new_graph_def->CopyFrom(**graph_def);
      *graph_def = new_graph_def;
    }
}
void RegisterGraphRequest::unsafe_arena_set_allocated_graph_def(
    ::tensorflow::GraphDef* graph_def) {
  if (GetArenaNoVirtual() == NULL) {
    delete graph_def_;
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.graph_def)
}
void RegisterGraphRequest::_slow_mutable_graph_options() {
  graph_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphOptions >(
      GetArenaNoVirtual());
}
::tensorflow::GraphOptions* RegisterGraphRequest::_slow_release_graph_options() {
  if (graph_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphOptions* temp = new ::tensorflow::GraphOptions(*graph_options_);
    graph_options_ = NULL;
    return temp;
  }
}
::tensorflow::GraphOptions* RegisterGraphRequest::unsafe_arena_release_graph_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphRequest.graph_options)
  
  ::tensorflow::GraphOptions* temp = graph_options_;
  graph_options_ = NULL;
  return temp;
}
void RegisterGraphRequest::_slow_set_allocated_graph_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphOptions** graph_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*graph_options) == NULL) {
      message_arena->Own(*graph_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*graph_options)) {
      ::tensorflow::GraphOptions* new_graph_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphOptions >(
            message_arena);
      new_graph_options->CopyFrom(**graph_options);
      *graph_options = new_graph_options;
    }
}
void RegisterGraphRequest::unsafe_arena_set_allocated_graph_options(
    ::tensorflow::GraphOptions* graph_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete graph_options_;
  }
  graph_options_ = graph_options;
  if (graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.graph_options)
}
void RegisterGraphRequest::_slow_mutable_debug_options() {
  debug_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebugOptions >(
      GetArenaNoVirtual());
}
::tensorflow::DebugOptions* RegisterGraphRequest::_slow_release_debug_options() {
  if (debug_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DebugOptions* temp = new ::tensorflow::DebugOptions(*debug_options_);
    debug_options_ = NULL;
    return temp;
  }
}
::tensorflow::DebugOptions* RegisterGraphRequest::unsafe_arena_release_debug_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphRequest.debug_options)
  
  ::tensorflow::DebugOptions* temp = debug_options_;
  debug_options_ = NULL;
  return temp;
}
void RegisterGraphRequest::_slow_set_allocated_debug_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DebugOptions** debug_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*debug_options) == NULL) {
      message_arena->Own(*debug_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*debug_options)) {
      ::tensorflow::DebugOptions* new_debug_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebugOptions >(
            message_arena);
      new_debug_options->CopyFrom(**debug_options);
      *debug_options = new_debug_options;
    }
}
void RegisterGraphRequest::unsafe_arena_set_allocated_debug_options(
    ::tensorflow::DebugOptions* debug_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete debug_options_;
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.debug_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterGraphRequest::kSessionHandleFieldNumber;
const int RegisterGraphRequest::kGraphDefFieldNumber;
const int RegisterGraphRequest::kHasControlFlowFieldNumber;
const int RegisterGraphRequest::kGraphOptionsFieldNumber;
const int RegisterGraphRequest::kDebugOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterGraphRequest::RegisterGraphRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RegisterGraphRequest)
}
RegisterGraphRequest::RegisterGraphRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisterGraphRequest)
}
RegisterGraphRequest::RegisterGraphRequest(const RegisterGraphRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_graph_def()) {
    graph_def_ = new ::tensorflow::GraphDef(*from.graph_def_);
  } else {
    graph_def_ = NULL;
  }
  if (from.has_graph_options()) {
    graph_options_ = new ::tensorflow::GraphOptions(*from.graph_options_);
  } else {
    graph_options_ = NULL;
  }
  if (from.has_debug_options()) {
    debug_options_ = new ::tensorflow::DebugOptions(*from.debug_options_);
  } else {
    debug_options_ = NULL;
  }
  has_control_flow_ = from.has_control_flow_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisterGraphRequest)
}

void RegisterGraphRequest::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&graph_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_control_flow_) -
      reinterpret_cast<char*>(&graph_def_)) + sizeof(has_control_flow_));
  _cached_size_ = 0;
}

RegisterGraphRequest::~RegisterGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisterGraphRequest)
  SharedDtor();
}

void RegisterGraphRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete graph_def_;
  if (this != internal_default_instance()) delete graph_options_;
  if (this != internal_default_instance()) delete debug_options_;
}

void RegisterGraphRequest::ArenaDtor(void* object) {
  RegisterGraphRequest* _this = reinterpret_cast< RegisterGraphRequest* >(object);
  (void)_this;
}
void RegisterGraphRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RegisterGraphRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterGraphRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterGraphRequest& RegisterGraphRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegisterGraphRequest* RegisterGraphRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RegisterGraphRequest>(arena);
}

void RegisterGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisterGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) {
    delete graph_def_;
  }
  graph_def_ = NULL;
  if (GetArenaNoVirtual() == NULL && graph_options_ != NULL) {
    delete graph_options_;
  }
  graph_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && debug_options_ != NULL) {
    delete debug_options_;
  }
  debug_options_ = NULL;
  has_control_flow_ = false;
  _internal_metadata_.Clear();
}

bool RegisterGraphRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RegisterGraphRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RegisterGraphRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.GraphDef graph_def = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_control_flow = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_control_flow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.GraphOptions graph_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DebugOptions debug_options = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RegisterGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RegisterGraphRequest)
  return false;
#undef DO_
}

void RegisterGraphRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RegisterGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->graph_def_, output);
  }

  // bool has_control_flow = 3 [deprecated = true];
  if (this->has_control_flow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_control_flow(), output);
  }

  // .tensorflow.GraphOptions graph_options = 4;
  if (this->has_graph_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->graph_options_, output);
  }

  // .tensorflow.DebugOptions debug_options = 5;
  if (this->has_debug_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->debug_options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RegisterGraphRequest)
}

::google::protobuf::uint8* RegisterGraphRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisterGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->graph_def_, deterministic, target);
  }

  // bool has_control_flow = 3 [deprecated = true];
  if (this->has_control_flow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_control_flow(), target);
  }

  // .tensorflow.GraphOptions graph_options = 4;
  if (this->has_graph_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->graph_options_, deterministic, target);
  }

  // .tensorflow.DebugOptions debug_options = 5;
  if (this->has_debug_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->debug_options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisterGraphRequest)
  return target;
}

size_t RegisterGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisterGraphRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_def_);
  }

  // .tensorflow.GraphOptions graph_options = 4;
  if (this->has_graph_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_options_);
  }

  // .tensorflow.DebugOptions debug_options = 5;
  if (this->has_debug_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->debug_options_);
  }

  // bool has_control_flow = 3 [deprecated = true];
  if (this->has_control_flow() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterGraphRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RegisterGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterGraphRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterGraphRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RegisterGraphRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RegisterGraphRequest)
    MergeFrom(*source);
  }
}

void RegisterGraphRequest::MergeFrom(const RegisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisterGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_graph_def()) {
    mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(from.graph_def());
  }
  if (from.has_graph_options()) {
    mutable_graph_options()->::tensorflow::GraphOptions::MergeFrom(from.graph_options());
  }
  if (from.has_debug_options()) {
    mutable_debug_options()->::tensorflow::DebugOptions::MergeFrom(from.debug_options());
  }
  if (from.has_control_flow() != 0) {
    set_has_control_flow(from.has_control_flow());
  }
}

void RegisterGraphRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RegisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterGraphRequest::CopyFrom(const RegisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterGraphRequest::IsInitialized() const {
  return true;
}

void RegisterGraphRequest::Swap(RegisterGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegisterGraphRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RegisterGraphRequest::UnsafeArenaSwap(RegisterGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegisterGraphRequest::InternalSwap(RegisterGraphRequest* other) {
  using std::swap;
  session_handle_.Swap(&other->session_handle_);
  swap(graph_def_, other->graph_def_);
  swap(graph_options_, other->graph_options_);
  swap(debug_options_, other->debug_options_);
  swap(has_control_flow_, other->has_control_flow_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterGraphRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterGraphRequest

// string session_handle = 1;
void RegisterGraphRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RegisterGraphRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.session_handle)
  return session_handle_.Get();
}
void RegisterGraphRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RegisterGraphRequest.session_handle)
}
#if LANG_CXX11
void RegisterGraphRequest::set_session_handle(::std::string&& value) {
  
  session_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.RegisterGraphRequest.session_handle)
}
#endif
void RegisterGraphRequest::set_session_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RegisterGraphRequest.session_handle)
}
void RegisterGraphRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RegisterGraphRequest.session_handle)
}
::std::string* RegisterGraphRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RegisterGraphRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RegisterGraphRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RegisterGraphRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphRequest.session_handle)
}
void RegisterGraphRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.session_handle)
}

// .tensorflow.GraphDef graph_def = 2;
bool RegisterGraphRequest::has_graph_def() const {
  return this != internal_default_instance() && graph_def_ != NULL;
}
void RegisterGraphRequest::clear_graph_def() {
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) delete graph_def_;
  graph_def_ = NULL;
}
const ::tensorflow::GraphDef& RegisterGraphRequest::graph_def() const {
  const ::tensorflow::GraphDef* p = graph_def_;
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.graph_def)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::GraphDef*>(
      &::tensorflow::_GraphDef_default_instance_);
}
::tensorflow::GraphDef* RegisterGraphRequest::mutable_graph_def() {
  
  if (graph_def_ == NULL) {
    _slow_mutable_graph_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphRequest.graph_def)
  return graph_def_;
}
::tensorflow::GraphDef* RegisterGraphRequest::release_graph_def() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphRequest.graph_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_def();
  } else {
    ::tensorflow::GraphDef* temp = graph_def_;
    graph_def_ = NULL;
    return temp;
  }
}
 void RegisterGraphRequest::set_allocated_graph_def(::tensorflow::GraphDef* graph_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_def_;
  }
  if (graph_def != NULL) {
    _slow_set_allocated_graph_def(message_arena, &graph_def);
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphRequest.graph_def)
}

// bool has_control_flow = 3 [deprecated = true];
void RegisterGraphRequest::clear_has_control_flow() {
  has_control_flow_ = false;
}
bool RegisterGraphRequest::has_control_flow() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.has_control_flow)
  return has_control_flow_;
}
void RegisterGraphRequest::set_has_control_flow(bool value) {
  
  has_control_flow_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RegisterGraphRequest.has_control_flow)
}

// .tensorflow.GraphOptions graph_options = 4;
bool RegisterGraphRequest::has_graph_options() const {
  return this != internal_default_instance() && graph_options_ != NULL;
}
void RegisterGraphRequest::clear_graph_options() {
  if (GetArenaNoVirtual() == NULL && graph_options_ != NULL) delete graph_options_;
  graph_options_ = NULL;
}
const ::tensorflow::GraphOptions& RegisterGraphRequest::graph_options() const {
  const ::tensorflow::GraphOptions* p = graph_options_;
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.graph_options)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::GraphOptions*>(
      &::tensorflow::_GraphOptions_default_instance_);
}
::tensorflow::GraphOptions* RegisterGraphRequest::mutable_graph_options() {
  
  if (graph_options_ == NULL) {
    _slow_mutable_graph_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphRequest.graph_options)
  return graph_options_;
}
::tensorflow::GraphOptions* RegisterGraphRequest::release_graph_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphRequest.graph_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_options();
  } else {
    ::tensorflow::GraphOptions* temp = graph_options_;
    graph_options_ = NULL;
    return temp;
  }
}
 void RegisterGraphRequest::set_allocated_graph_options(::tensorflow::GraphOptions* graph_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_options_;
  }
  if (graph_options != NULL) {
    _slow_set_allocated_graph_options(message_arena, &graph_options);
  }
  graph_options_ = graph_options;
  if (graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphRequest.graph_options)
}

// .tensorflow.DebugOptions debug_options = 5;
bool RegisterGraphRequest::has_debug_options() const {
  return this != internal_default_instance() && debug_options_ != NULL;
}
void RegisterGraphRequest::clear_debug_options() {
  if (GetArenaNoVirtual() == NULL && debug_options_ != NULL) delete debug_options_;
  debug_options_ = NULL;
}
const ::tensorflow::DebugOptions& RegisterGraphRequest::debug_options() const {
  const ::tensorflow::DebugOptions* p = debug_options_;
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.debug_options)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::DebugOptions*>(
      &::tensorflow::_DebugOptions_default_instance_);
}
::tensorflow::DebugOptions* RegisterGraphRequest::mutable_debug_options() {
  
  if (debug_options_ == NULL) {
    _slow_mutable_debug_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphRequest.debug_options)
  return debug_options_;
}
::tensorflow::DebugOptions* RegisterGraphRequest::release_debug_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphRequest.debug_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_debug_options();
  } else {
    ::tensorflow::DebugOptions* temp = debug_options_;
    debug_options_ = NULL;
    return temp;
  }
}
 void RegisterGraphRequest::set_allocated_debug_options(::tensorflow::DebugOptions* debug_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete debug_options_;
  }
  if (debug_options != NULL) {
    _slow_set_allocated_debug_options(message_arena, &debug_options);
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphRequest.debug_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterGraphResponse::kGraphHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterGraphResponse::RegisterGraphResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RegisterGraphResponse)
}
RegisterGraphResponse::RegisterGraphResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisterGraphResponse)
}
RegisterGraphResponse::RegisterGraphResponse(const RegisterGraphResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graph_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.graph_handle().size() > 0) {
    graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_handle(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisterGraphResponse)
}

void RegisterGraphResponse::SharedCtor() {
  graph_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RegisterGraphResponse::~RegisterGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisterGraphResponse)
  SharedDtor();
}

void RegisterGraphResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  graph_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void RegisterGraphResponse::ArenaDtor(void* object) {
  RegisterGraphResponse* _this = reinterpret_cast< RegisterGraphResponse* >(object);
  (void)_this;
}
void RegisterGraphResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RegisterGraphResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterGraphResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterGraphResponse& RegisterGraphResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegisterGraphResponse* RegisterGraphResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RegisterGraphResponse>(arena);
}

void RegisterGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisterGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool RegisterGraphResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RegisterGraphResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string graph_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RegisterGraphResponse.graph_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RegisterGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RegisterGraphResponse)
  return false;
#undef DO_
}

void RegisterGraphResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RegisterGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphResponse.graph_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RegisterGraphResponse)
}

::google::protobuf::uint8* RegisterGraphResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisterGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphResponse.graph_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_handle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisterGraphResponse)
  return target;
}

size_t RegisterGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisterGraphResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterGraphResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RegisterGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterGraphResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterGraphResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RegisterGraphResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RegisterGraphResponse)
    MergeFrom(*source);
  }
}

void RegisterGraphResponse::MergeFrom(const RegisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisterGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.graph_handle().size() > 0) {
    set_graph_handle(from.graph_handle());
  }
}

void RegisterGraphResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RegisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterGraphResponse::CopyFrom(const RegisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterGraphResponse::IsInitialized() const {
  return true;
}

void RegisterGraphResponse::Swap(RegisterGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegisterGraphResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RegisterGraphResponse::UnsafeArenaSwap(RegisterGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegisterGraphResponse::InternalSwap(RegisterGraphResponse* other) {
  using std::swap;
  graph_handle_.Swap(&other->graph_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterGraphResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterGraphResponse

// string graph_handle = 1;
void RegisterGraphResponse::clear_graph_handle() {
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RegisterGraphResponse::graph_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphResponse.graph_handle)
  return graph_handle_.Get();
}
void RegisterGraphResponse::set_graph_handle(const ::std::string& value) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RegisterGraphResponse.graph_handle)
}
#if LANG_CXX11
void RegisterGraphResponse::set_graph_handle(::std::string&& value) {
  
  graph_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.RegisterGraphResponse.graph_handle)
}
#endif
void RegisterGraphResponse::set_graph_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RegisterGraphResponse.graph_handle)
}
void RegisterGraphResponse::set_graph_handle(const char* value,
    size_t size) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RegisterGraphResponse.graph_handle)
}
::std::string* RegisterGraphResponse::mutable_graph_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphResponse.graph_handle)
  return graph_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RegisterGraphResponse::release_graph_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphResponse.graph_handle)
  
  return graph_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RegisterGraphResponse::unsafe_arena_release_graph_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphResponse.graph_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RegisterGraphResponse::set_allocated_graph_handle(::std::string* graph_handle) {
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphResponse.graph_handle)
}
void RegisterGraphResponse::unsafe_arena_set_allocated_graph_handle(
    ::std::string* graph_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphResponse.graph_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeregisterGraphRequest::kSessionHandleFieldNumber;
const int DeregisterGraphRequest::kGraphHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterGraphRequest::DeregisterGraphRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeregisterGraphRequest)
}
DeregisterGraphRequest::DeregisterGraphRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeregisterGraphRequest)
}
DeregisterGraphRequest::DeregisterGraphRequest(const DeregisterGraphRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graph_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.graph_handle().size() > 0) {
    graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_handle(),
      GetArenaNoVirtual());
  }
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeregisterGraphRequest)
}

void DeregisterGraphRequest::SharedCtor() {
  graph_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeregisterGraphRequest::~DeregisterGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.DeregisterGraphRequest)
  SharedDtor();
}

void DeregisterGraphRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  graph_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeregisterGraphRequest::ArenaDtor(void* object) {
  DeregisterGraphRequest* _this = reinterpret_cast< DeregisterGraphRequest* >(object);
  (void)_this;
}
void DeregisterGraphRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeregisterGraphRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeregisterGraphRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeregisterGraphRequest& DeregisterGraphRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeregisterGraphRequest* DeregisterGraphRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeregisterGraphRequest>(arena);
}

void DeregisterGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeregisterGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeregisterGraphRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeregisterGraphRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string graph_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeregisterGraphRequest.graph_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeregisterGraphRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeregisterGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeregisterGraphRequest)
  return false;
#undef DO_
}

void DeregisterGraphRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeregisterGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.graph_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_handle(), output);
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.DeregisterGraphRequest)
}

::google::protobuf::uint8* DeregisterGraphRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeregisterGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.graph_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_handle(), target);
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_handle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeregisterGraphRequest)
  return target;
}

size_t DeregisterGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeregisterGraphRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_handle());
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeregisterGraphRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeregisterGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregisterGraphRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeregisterGraphRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeregisterGraphRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeregisterGraphRequest)
    MergeFrom(*source);
  }
}

void DeregisterGraphRequest::MergeFrom(const DeregisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeregisterGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.graph_handle().size() > 0) {
    set_graph_handle(from.graph_handle());
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
}

void DeregisterGraphRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeregisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterGraphRequest::CopyFrom(const DeregisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeregisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterGraphRequest::IsInitialized() const {
  return true;
}

void DeregisterGraphRequest::Swap(DeregisterGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeregisterGraphRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeregisterGraphRequest::UnsafeArenaSwap(DeregisterGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeregisterGraphRequest::InternalSwap(DeregisterGraphRequest* other) {
  using std::swap;
  graph_handle_.Swap(&other->graph_handle_);
  session_handle_.Swap(&other->session_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeregisterGraphRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeregisterGraphRequest

// string session_handle = 2;
void DeregisterGraphRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeregisterGraphRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeregisterGraphRequest.session_handle)
  return session_handle_.Get();
}
void DeregisterGraphRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeregisterGraphRequest.session_handle)
}
#if LANG_CXX11
void DeregisterGraphRequest::set_session_handle(::std::string&& value) {
  
  session_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.DeregisterGraphRequest.session_handle)
}
#endif
void DeregisterGraphRequest::set_session_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeregisterGraphRequest.session_handle)
}
void DeregisterGraphRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeregisterGraphRequest.session_handle)
}
::std::string* DeregisterGraphRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeregisterGraphRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeregisterGraphRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.DeregisterGraphRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeregisterGraphRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeregisterGraphRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeregisterGraphRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeregisterGraphRequest.session_handle)
}
void DeregisterGraphRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeregisterGraphRequest.session_handle)
}

// string graph_handle = 1;
void DeregisterGraphRequest::clear_graph_handle() {
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeregisterGraphRequest::graph_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeregisterGraphRequest.graph_handle)
  return graph_handle_.Get();
}
void DeregisterGraphRequest::set_graph_handle(const ::std::string& value) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeregisterGraphRequest.graph_handle)
}
#if LANG_CXX11
void DeregisterGraphRequest::set_graph_handle(::std::string&& value) {
  
  graph_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.DeregisterGraphRequest.graph_handle)
}
#endif
void DeregisterGraphRequest::set_graph_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeregisterGraphRequest.graph_handle)
}
void DeregisterGraphRequest::set_graph_handle(const char* value,
    size_t size) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeregisterGraphRequest.graph_handle)
}
::std::string* DeregisterGraphRequest::mutable_graph_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeregisterGraphRequest.graph_handle)
  return graph_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeregisterGraphRequest::release_graph_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.DeregisterGraphRequest.graph_handle)
  
  return graph_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeregisterGraphRequest::unsafe_arena_release_graph_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeregisterGraphRequest.graph_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeregisterGraphRequest::set_allocated_graph_handle(::std::string* graph_handle) {
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeregisterGraphRequest.graph_handle)
}
void DeregisterGraphRequest::unsafe_arena_set_allocated_graph_handle(
    ::std::string* graph_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeregisterGraphRequest.graph_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterGraphResponse::DeregisterGraphResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeregisterGraphResponse)
}
DeregisterGraphResponse::DeregisterGraphResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeregisterGraphResponse)
}
DeregisterGraphResponse::DeregisterGraphResponse(const DeregisterGraphResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeregisterGraphResponse)
}

void DeregisterGraphResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeregisterGraphResponse::~DeregisterGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.DeregisterGraphResponse)
  SharedDtor();
}

void DeregisterGraphResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DeregisterGraphResponse::ArenaDtor(void* object) {
  DeregisterGraphResponse* _this = reinterpret_cast< DeregisterGraphResponse* >(object);
  (void)_this;
}
void DeregisterGraphResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeregisterGraphResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeregisterGraphResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeregisterGraphResponse& DeregisterGraphResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeregisterGraphResponse* DeregisterGraphResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeregisterGraphResponse>(arena);
}

void DeregisterGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeregisterGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeregisterGraphResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeregisterGraphResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeregisterGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeregisterGraphResponse)
  return false;
#undef DO_
}

void DeregisterGraphResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeregisterGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.DeregisterGraphResponse)
}

::google::protobuf::uint8* DeregisterGraphResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeregisterGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeregisterGraphResponse)
  return target;
}

size_t DeregisterGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeregisterGraphResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeregisterGraphResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeregisterGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregisterGraphResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeregisterGraphResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeregisterGraphResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeregisterGraphResponse)
    MergeFrom(*source);
  }
}

void DeregisterGraphResponse::MergeFrom(const DeregisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeregisterGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeregisterGraphResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeregisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterGraphResponse::CopyFrom(const DeregisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeregisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterGraphResponse::IsInitialized() const {
  return true;
}

void DeregisterGraphResponse::Swap(DeregisterGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeregisterGraphResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeregisterGraphResponse::UnsafeArenaSwap(DeregisterGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeregisterGraphResponse::InternalSwap(DeregisterGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeregisterGraphResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeregisterGraphResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanupAllRequest::kContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupAllRequest::CleanupAllRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupAllRequest)
}
CleanupAllRequest::CleanupAllRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  container_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupAllRequest)
}
CleanupAllRequest::CleanupAllRequest(const CleanupAllRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      container_(from.container_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupAllRequest)
}

void CleanupAllRequest::SharedCtor() {
  _cached_size_ = 0;
}

CleanupAllRequest::~CleanupAllRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupAllRequest)
  SharedDtor();
}

void CleanupAllRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void CleanupAllRequest::ArenaDtor(void* object) {
  CleanupAllRequest* _this = reinterpret_cast< CleanupAllRequest* >(object);
  (void)_this;
}
void CleanupAllRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CleanupAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupAllRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CleanupAllRequest& CleanupAllRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CleanupAllRequest* CleanupAllRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CleanupAllRequest>(arena);
}

void CleanupAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupAllRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_.Clear();
  _internal_metadata_.Clear();
}

bool CleanupAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupAllRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string container = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_container()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container(this->container_size() - 1).data(),
            static_cast<int>(this->container(this->container_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CleanupAllRequest.container"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupAllRequest)
  return false;
#undef DO_
}

void CleanupAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupAllRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string container = 1;
  for (int i = 0, n = this->container_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), static_cast<int>(this->container(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CleanupAllRequest.container");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->container(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupAllRequest)
}

::google::protobuf::uint8* CleanupAllRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupAllRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string container = 1;
  for (int i = 0, n = this->container_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), static_cast<int>(this->container(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CleanupAllRequest.container");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->container(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupAllRequest)
  return target;
}

size_t CleanupAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupAllRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string container = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->container_size());
  for (int i = 0, n = this->container_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->container(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupAllRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupAllRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupAllRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupAllRequest)
    MergeFrom(*source);
  }
}

void CleanupAllRequest::MergeFrom(const CleanupAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  container_.MergeFrom(from.container_);
}

void CleanupAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupAllRequest::CopyFrom(const CleanupAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupAllRequest::IsInitialized() const {
  return true;
}

void CleanupAllRequest::Swap(CleanupAllRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupAllRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CleanupAllRequest::UnsafeArenaSwap(CleanupAllRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupAllRequest::InternalSwap(CleanupAllRequest* other) {
  using std::swap;
  container_.InternalSwap(&other->container_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupAllRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupAllRequest

// repeated string container = 1;
int CleanupAllRequest::container_size() const {
  return container_.size();
}
void CleanupAllRequest::clear_container() {
  container_.Clear();
}
const ::std::string& CleanupAllRequest::container(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CleanupAllRequest.container)
  return container_.Get(index);
}
::std::string* CleanupAllRequest::mutable_container(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CleanupAllRequest.container)
  return container_.Mutable(index);
}
void CleanupAllRequest::set_container(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CleanupAllRequest.container)
  container_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CleanupAllRequest::set_container(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CleanupAllRequest.container)
  container_.Mutable(index)->assign(std::move(value));
}
#endif
void CleanupAllRequest::set_container(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  container_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CleanupAllRequest.container)
}
void CleanupAllRequest::set_container(int index, const char* value, size_t size) {
  container_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CleanupAllRequest.container)
}
::std::string* CleanupAllRequest::add_container() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CleanupAllRequest.container)
  return container_.Add();
}
void CleanupAllRequest::add_container(const ::std::string& value) {
  container_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CleanupAllRequest.container)
}
#if LANG_CXX11
void CleanupAllRequest::add_container(::std::string&& value) {
  container_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.CleanupAllRequest.container)
}
#endif
void CleanupAllRequest::add_container(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  container_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CleanupAllRequest.container)
}
void CleanupAllRequest::add_container(const char* value, size_t size) {
  container_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CleanupAllRequest.container)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CleanupAllRequest::container() const {
  // @@protoc_insertion_point(field_list:tensorflow.CleanupAllRequest.container)
  return container_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CleanupAllRequest::mutable_container() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CleanupAllRequest.container)
  return &container_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupAllResponse::CleanupAllResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupAllResponse)
}
CleanupAllResponse::CleanupAllResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupAllResponse)
}
CleanupAllResponse::CleanupAllResponse(const CleanupAllResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupAllResponse)
}

void CleanupAllResponse::SharedCtor() {
  _cached_size_ = 0;
}

CleanupAllResponse::~CleanupAllResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupAllResponse)
  SharedDtor();
}

void CleanupAllResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void CleanupAllResponse::ArenaDtor(void* object) {
  CleanupAllResponse* _this = reinterpret_cast< CleanupAllResponse* >(object);
  (void)_this;
}
void CleanupAllResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CleanupAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupAllResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CleanupAllResponse& CleanupAllResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CleanupAllResponse* CleanupAllResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CleanupAllResponse>(arena);
}

void CleanupAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupAllResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CleanupAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupAllResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupAllResponse)
  return false;
#undef DO_
}

void CleanupAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupAllResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupAllResponse)
}

::google::protobuf::uint8* CleanupAllResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupAllResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupAllResponse)
  return target;
}

size_t CleanupAllResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupAllResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupAllResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupAllResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupAllResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupAllResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupAllResponse)
    MergeFrom(*source);
  }
}

void CleanupAllResponse::MergeFrom(const CleanupAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupAllResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CleanupAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupAllResponse::CopyFrom(const CleanupAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupAllResponse::IsInitialized() const {
  return true;
}

void CleanupAllResponse::Swap(CleanupAllResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupAllResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CleanupAllResponse::UnsafeArenaSwap(CleanupAllResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupAllResponse::InternalSwap(CleanupAllResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupAllResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupAllResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutorOpts::kRecordCostsFieldNumber;
const int ExecutorOpts::kRecordTimelineFieldNumber;
const int ExecutorOpts::kRecordPartitionGraphsFieldNumber;
const int ExecutorOpts::kReportTensorAllocationsUponOomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutorOpts::ExecutorOpts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ExecutorOpts)
}
ExecutorOpts::ExecutorOpts(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExecutorOpts)
}
ExecutorOpts::ExecutorOpts(const ExecutorOpts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&record_costs_, &from.record_costs_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_tensor_allocations_upon_oom_) -
    reinterpret_cast<char*>(&record_costs_)) + sizeof(report_tensor_allocations_upon_oom_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExecutorOpts)
}

void ExecutorOpts::SharedCtor() {
  ::memset(&record_costs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_tensor_allocations_upon_oom_) -
      reinterpret_cast<char*>(&record_costs_)) + sizeof(report_tensor_allocations_upon_oom_));
  _cached_size_ = 0;
}

ExecutorOpts::~ExecutorOpts() {
  // @@protoc_insertion_point(destructor:tensorflow.ExecutorOpts)
  SharedDtor();
}

void ExecutorOpts::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void ExecutorOpts::ArenaDtor(void* object) {
  ExecutorOpts* _this = reinterpret_cast< ExecutorOpts* >(object);
  (void)_this;
}
void ExecutorOpts::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExecutorOpts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorOpts::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecutorOpts& ExecutorOpts::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecutorOpts* ExecutorOpts::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExecutorOpts>(arena);
}

void ExecutorOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExecutorOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&record_costs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_tensor_allocations_upon_oom_) -
      reinterpret_cast<char*>(&record_costs_)) + sizeof(report_tensor_allocations_upon_oom_));
  _internal_metadata_.Clear();
}

bool ExecutorOpts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ExecutorOpts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool record_costs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_costs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool record_timeline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_timeline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool record_partition_graphs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_partition_graphs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool report_tensor_allocations_upon_oom = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &report_tensor_allocations_upon_oom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ExecutorOpts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ExecutorOpts)
  return false;
#undef DO_
}

void ExecutorOpts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ExecutorOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool record_costs = 1;
  if (this->record_costs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->record_costs(), output);
  }

  // bool record_timeline = 3;
  if (this->record_timeline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->record_timeline(), output);
  }

  // bool record_partition_graphs = 4;
  if (this->record_partition_graphs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->record_partition_graphs(), output);
  }

  // bool report_tensor_allocations_upon_oom = 5;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->report_tensor_allocations_upon_oom(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.ExecutorOpts)
}

::google::protobuf::uint8* ExecutorOpts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExecutorOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool record_costs = 1;
  if (this->record_costs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->record_costs(), target);
  }

  // bool record_timeline = 3;
  if (this->record_timeline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->record_timeline(), target);
  }

  // bool record_partition_graphs = 4;
  if (this->record_partition_graphs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->record_partition_graphs(), target);
  }

  // bool report_tensor_allocations_upon_oom = 5;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->report_tensor_allocations_upon_oom(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExecutorOpts)
  return target;
}

size_t ExecutorOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExecutorOpts)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool record_costs = 1;
  if (this->record_costs() != 0) {
    total_size += 1 + 1;
  }

  // bool record_timeline = 3;
  if (this->record_timeline() != 0) {
    total_size += 1 + 1;
  }

  // bool record_partition_graphs = 4;
  if (this->record_partition_graphs() != 0) {
    total_size += 1 + 1;
  }

  // bool report_tensor_allocations_upon_oom = 5;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorOpts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ExecutorOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutorOpts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutorOpts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ExecutorOpts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ExecutorOpts)
    MergeFrom(*source);
  }
}

void ExecutorOpts::MergeFrom(const ExecutorOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExecutorOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_costs() != 0) {
    set_record_costs(from.record_costs());
  }
  if (from.record_timeline() != 0) {
    set_record_timeline(from.record_timeline());
  }
  if (from.record_partition_graphs() != 0) {
    set_record_partition_graphs(from.record_partition_graphs());
  }
  if (from.report_tensor_allocations_upon_oom() != 0) {
    set_report_tensor_allocations_upon_oom(from.report_tensor_allocations_upon_oom());
  }
}

void ExecutorOpts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ExecutorOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorOpts::CopyFrom(const ExecutorOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExecutorOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorOpts::IsInitialized() const {
  return true;
}

void ExecutorOpts::Swap(ExecutorOpts* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExecutorOpts* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ExecutorOpts::UnsafeArenaSwap(ExecutorOpts* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExecutorOpts::InternalSwap(ExecutorOpts* other) {
  using std::swap;
  swap(record_costs_, other->record_costs_);
  swap(record_timeline_, other->record_timeline_);
  swap(record_partition_graphs_, other->record_partition_graphs_);
  swap(report_tensor_allocations_upon_oom_, other->report_tensor_allocations_upon_oom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutorOpts::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutorOpts

// bool record_costs = 1;
void ExecutorOpts::clear_record_costs() {
  record_costs_ = false;
}
bool ExecutorOpts::record_costs() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExecutorOpts.record_costs)
  return record_costs_;
}
void ExecutorOpts::set_record_costs(bool value) {
  
  record_costs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExecutorOpts.record_costs)
}

// bool record_timeline = 3;
void ExecutorOpts::clear_record_timeline() {
  record_timeline_ = false;
}
bool ExecutorOpts::record_timeline() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExecutorOpts.record_timeline)
  return record_timeline_;
}
void ExecutorOpts::set_record_timeline(bool value) {
  
  record_timeline_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExecutorOpts.record_timeline)
}

// bool record_partition_graphs = 4;
void ExecutorOpts::clear_record_partition_graphs() {
  record_partition_graphs_ = false;
}
bool ExecutorOpts::record_partition_graphs() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExecutorOpts.record_partition_graphs)
  return record_partition_graphs_;
}
void ExecutorOpts::set_record_partition_graphs(bool value) {
  
  record_partition_graphs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExecutorOpts.record_partition_graphs)
}

// bool report_tensor_allocations_upon_oom = 5;
void ExecutorOpts::clear_report_tensor_allocations_upon_oom() {
  report_tensor_allocations_upon_oom_ = false;
}
bool ExecutorOpts::report_tensor_allocations_upon_oom() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExecutorOpts.report_tensor_allocations_upon_oom)
  return report_tensor_allocations_upon_oom_;
}
void ExecutorOpts::set_report_tensor_allocations_upon_oom(bool value) {
  
  report_tensor_allocations_upon_oom_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExecutorOpts.report_tensor_allocations_upon_oom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunGraphRequest::_slow_mutable_exec_opts() {
  exec_opts_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExecutorOpts >(
      GetArenaNoVirtual());
}
::tensorflow::ExecutorOpts* RunGraphRequest::_slow_release_exec_opts() {
  if (exec_opts_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ExecutorOpts* temp = new ::tensorflow::ExecutorOpts(*exec_opts_);
    exec_opts_ = NULL;
    return temp;
  }
}
::tensorflow::ExecutorOpts* RunGraphRequest::unsafe_arena_release_exec_opts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphRequest.exec_opts)
  
  ::tensorflow::ExecutorOpts* temp = exec_opts_;
  exec_opts_ = NULL;
  return temp;
}
void RunGraphRequest::_slow_set_allocated_exec_opts(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ExecutorOpts** exec_opts) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*exec_opts) == NULL) {
      message_arena->Own(*exec_opts);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*exec_opts)) {
      ::tensorflow::ExecutorOpts* new_exec_opts = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExecutorOpts >(
            message_arena);
      new_exec_opts->CopyFrom(**exec_opts);
      *exec_opts = new_exec_opts;
    }
}
void RunGraphRequest::unsafe_arena_set_allocated_exec_opts(
    ::tensorflow::ExecutorOpts* exec_opts) {
  if (GetArenaNoVirtual() == NULL) {
    delete exec_opts_;
  }
  exec_opts_ = exec_opts;
  if (exec_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphRequest.exec_opts)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunGraphRequest::kSessionHandleFieldNumber;
const int RunGraphRequest::kGraphHandleFieldNumber;
const int RunGraphRequest::kStepIdFieldNumber;
const int RunGraphRequest::kExecOptsFieldNumber;
const int RunGraphRequest::kSendFieldNumber;
const int RunGraphRequest::kRecvKeyFieldNumber;
const int RunGraphRequest::kIsPartialFieldNumber;
const int RunGraphRequest::kIsLastPartialRunFieldNumber;
const int RunGraphRequest::kStoreErrorsInResponseBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunGraphRequest::RunGraphRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunGraphRequest)
}
RunGraphRequest::RunGraphRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  send_(arena),
  recv_key_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunGraphRequest)
}
RunGraphRequest::RunGraphRequest(const RunGraphRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      send_(from.send_),
      recv_key_(from.recv_key_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graph_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.graph_handle().size() > 0) {
    graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_handle(),
      GetArenaNoVirtual());
  }
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_exec_opts()) {
    exec_opts_ = new ::tensorflow::ExecutorOpts(*from.exec_opts_);
  } else {
    exec_opts_ = NULL;
  }
  ::memcpy(&step_id_, &from.step_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&store_errors_in_response_body_) -
    reinterpret_cast<char*>(&step_id_)) + sizeof(store_errors_in_response_body_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunGraphRequest)
}

void RunGraphRequest::SharedCtor() {
  graph_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&exec_opts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_errors_in_response_body_) -
      reinterpret_cast<char*>(&exec_opts_)) + sizeof(store_errors_in_response_body_));
  _cached_size_ = 0;
}

RunGraphRequest::~RunGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RunGraphRequest)
  SharedDtor();
}

void RunGraphRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  graph_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete exec_opts_;
}

void RunGraphRequest::ArenaDtor(void* object) {
  RunGraphRequest* _this = reinterpret_cast< RunGraphRequest* >(object);
  (void)_this;
}
void RunGraphRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunGraphRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunGraphRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RunGraphRequest& RunGraphRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

RunGraphRequest* RunGraphRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunGraphRequest>(arena);
}

void RunGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_.Clear();
  recv_key_.Clear();
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && exec_opts_ != NULL) {
    delete exec_opts_;
  }
  exec_opts_ = NULL;
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_errors_in_response_body_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(store_errors_in_response_body_));
  _internal_metadata_.Clear();
}

bool RunGraphRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunGraphRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string graph_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphRequest.graph_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 step_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.NamedTensorProto send = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_send()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string recv_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recv_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_key(this->recv_key_size() - 1).data(),
            static_cast<int>(this->recv_key(this->recv_key_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphRequest.recv_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ExecutorOpts exec_opts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exec_opts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_partial = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_partial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last_partial_run = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_partial_run_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_handle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool store_errors_in_response_body = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_errors_in_response_body_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunGraphRequest)
  return false;
#undef DO_
}

void RunGraphRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.graph_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_handle(), output);
  }

  // int64 step_id = 2;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->step_id(), output);
  }

  // repeated .tensorflow.NamedTensorProto send = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->send_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->send(static_cast<int>(i)), output);
  }

  // repeated string recv_key = 4;
  for (int i = 0, n = this->recv_key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_key(i).data(), static_cast<int>(this->recv_key(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.recv_key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->recv_key(i), output);
  }

  // .tensorflow.ExecutorOpts exec_opts = 5;
  if (this->has_exec_opts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->exec_opts_, output);
  }

  // bool is_partial = 6;
  if (this->is_partial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_partial(), output);
  }

  // bool is_last_partial_run = 7;
  if (this->is_last_partial_run() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_last_partial_run(), output);
  }

  // string session_handle = 8;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->session_handle(), output);
  }

  // bool store_errors_in_response_body = 9;
  if (this->store_errors_in_response_body() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->store_errors_in_response_body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RunGraphRequest)
}

::google::protobuf::uint8* RunGraphRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.graph_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_handle(), target);
  }

  // int64 step_id = 2;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->step_id(), target);
  }

  // repeated .tensorflow.NamedTensorProto send = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->send_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->send(static_cast<int>(i)), deterministic, target);
  }

  // repeated string recv_key = 4;
  for (int i = 0, n = this->recv_key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_key(i).data(), static_cast<int>(this->recv_key(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.recv_key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->recv_key(i), target);
  }

  // .tensorflow.ExecutorOpts exec_opts = 5;
  if (this->has_exec_opts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->exec_opts_, deterministic, target);
  }

  // bool is_partial = 6;
  if (this->is_partial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_partial(), target);
  }

  // bool is_last_partial_run = 7;
  if (this->is_last_partial_run() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_last_partial_run(), target);
  }

  // string session_handle = 8;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->session_handle(), target);
  }

  // bool store_errors_in_response_body = 9;
  if (this->store_errors_in_response_body() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->store_errors_in_response_body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunGraphRequest)
  return target;
}

size_t RunGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunGraphRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.NamedTensorProto send = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->send_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send(static_cast<int>(i)));
    }
  }

  // repeated string recv_key = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->recv_key_size());
  for (int i = 0, n = this->recv_key_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recv_key(i));
  }

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_handle());
  }

  // string session_handle = 8;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // .tensorflow.ExecutorOpts exec_opts = 5;
  if (this->has_exec_opts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exec_opts_);
  }

  // int64 step_id = 2;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // bool is_partial = 6;
  if (this->is_partial() != 0) {
    total_size += 1 + 1;
  }

  // bool is_last_partial_run = 7;
  if (this->is_last_partial_run() != 0) {
    total_size += 1 + 1;
  }

  // bool store_errors_in_response_body = 9;
  if (this->store_errors_in_response_body() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunGraphRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunGraphRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunGraphRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunGraphRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunGraphRequest)
    MergeFrom(*source);
  }
}

void RunGraphRequest::MergeFrom(const RunGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  send_.MergeFrom(from.send_);
  recv_key_.MergeFrom(from.recv_key_);
  if (from.graph_handle().size() > 0) {
    set_graph_handle(from.graph_handle());
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_exec_opts()) {
    mutable_exec_opts()->::tensorflow::ExecutorOpts::MergeFrom(from.exec_opts());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.is_partial() != 0) {
    set_is_partial(from.is_partial());
  }
  if (from.is_last_partial_run() != 0) {
    set_is_last_partial_run(from.is_last_partial_run());
  }
  if (from.store_errors_in_response_body() != 0) {
    set_store_errors_in_response_body(from.store_errors_in_response_body());
  }
}

void RunGraphRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunGraphRequest::CopyFrom(const RunGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunGraphRequest::IsInitialized() const {
  return true;
}

void RunGraphRequest::Swap(RunGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunGraphRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RunGraphRequest::UnsafeArenaSwap(RunGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunGraphRequest::InternalSwap(RunGraphRequest* other) {
  using std::swap;
  send_.InternalSwap(&other->send_);
  recv_key_.InternalSwap(&other->recv_key_);
  graph_handle_.Swap(&other->graph_handle_);
  session_handle_.Swap(&other->session_handle_);
  swap(exec_opts_, other->exec_opts_);
  swap(step_id_, other->step_id_);
  swap(is_partial_, other->is_partial_);
  swap(is_last_partial_run_, other->is_last_partial_run_);
  swap(store_errors_in_response_body_, other->store_errors_in_response_body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunGraphRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunGraphRequest

// string session_handle = 8;
void RunGraphRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RunGraphRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.session_handle)
  return session_handle_.Get();
}
void RunGraphRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.session_handle)
}
#if LANG_CXX11
void RunGraphRequest::set_session_handle(::std::string&& value) {
  
  session_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.RunGraphRequest.session_handle)
}
#endif
void RunGraphRequest::set_session_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunGraphRequest.session_handle)
}
void RunGraphRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunGraphRequest.session_handle)
}
::std::string* RunGraphRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunGraphRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunGraphRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RunGraphRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphRequest.session_handle)
}
void RunGraphRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphRequest.session_handle)
}

// string graph_handle = 1;
void RunGraphRequest::clear_graph_handle() {
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RunGraphRequest::graph_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.graph_handle)
  return graph_handle_.Get();
}
void RunGraphRequest::set_graph_handle(const ::std::string& value) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.graph_handle)
}
#if LANG_CXX11
void RunGraphRequest::set_graph_handle(::std::string&& value) {
  
  graph_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.RunGraphRequest.graph_handle)
}
#endif
void RunGraphRequest::set_graph_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunGraphRequest.graph_handle)
}
void RunGraphRequest::set_graph_handle(const char* value,
    size_t size) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunGraphRequest.graph_handle)
}
::std::string* RunGraphRequest::mutable_graph_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.graph_handle)
  return graph_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunGraphRequest::release_graph_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphRequest.graph_handle)
  
  return graph_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunGraphRequest::unsafe_arena_release_graph_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphRequest.graph_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RunGraphRequest::set_allocated_graph_handle(::std::string* graph_handle) {
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphRequest.graph_handle)
}
void RunGraphRequest::unsafe_arena_set_allocated_graph_handle(
    ::std::string* graph_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphRequest.graph_handle)
}

// int64 step_id = 2;
void RunGraphRequest::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RunGraphRequest::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.step_id)
  return step_id_;
}
void RunGraphRequest::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.step_id)
}

// .tensorflow.ExecutorOpts exec_opts = 5;
bool RunGraphRequest::has_exec_opts() const {
  return this != internal_default_instance() && exec_opts_ != NULL;
}
void RunGraphRequest::clear_exec_opts() {
  if (GetArenaNoVirtual() == NULL && exec_opts_ != NULL) delete exec_opts_;
  exec_opts_ = NULL;
}
const ::tensorflow::ExecutorOpts& RunGraphRequest::exec_opts() const {
  const ::tensorflow::ExecutorOpts* p = exec_opts_;
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.exec_opts)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::ExecutorOpts*>(
      &::tensorflow::_ExecutorOpts_default_instance_);
}
::tensorflow::ExecutorOpts* RunGraphRequest::mutable_exec_opts() {
  
  if (exec_opts_ == NULL) {
    _slow_mutable_exec_opts();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.exec_opts)
  return exec_opts_;
}
::tensorflow::ExecutorOpts* RunGraphRequest::release_exec_opts() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphRequest.exec_opts)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_exec_opts();
  } else {
    ::tensorflow::ExecutorOpts* temp = exec_opts_;
    exec_opts_ = NULL;
    return temp;
  }
}
 void RunGraphRequest::set_allocated_exec_opts(::tensorflow::ExecutorOpts* exec_opts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exec_opts_;
  }
  if (exec_opts != NULL) {
    _slow_set_allocated_exec_opts(message_arena, &exec_opts);
  }
  exec_opts_ = exec_opts;
  if (exec_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphRequest.exec_opts)
}

// repeated .tensorflow.NamedTensorProto send = 3;
int RunGraphRequest::send_size() const {
  return send_.size();
}
void RunGraphRequest::clear_send() {
  send_.Clear();
}
const ::tensorflow::NamedTensorProto& RunGraphRequest::send(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.send)
  return send_.Get(index);
}
::tensorflow::NamedTensorProto* RunGraphRequest::mutable_send(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.send)
  return send_.Mutable(index);
}
::tensorflow::NamedTensorProto* RunGraphRequest::add_send() {
  // @@protoc_insertion_point(field_add:tensorflow.RunGraphRequest.send)
  return send_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
RunGraphRequest::mutable_send() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunGraphRequest.send)
  return &send_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
RunGraphRequest::send() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunGraphRequest.send)
  return send_;
}

// repeated string recv_key = 4;
int RunGraphRequest::recv_key_size() const {
  return recv_key_.size();
}
void RunGraphRequest::clear_recv_key() {
  recv_key_.Clear();
}
const ::std::string& RunGraphRequest::recv_key(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.recv_key)
  return recv_key_.Get(index);
}
::std::string* RunGraphRequest::mutable_recv_key(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.recv_key)
  return recv_key_.Mutable(index);
}
void RunGraphRequest::set_recv_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.recv_key)
  recv_key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RunGraphRequest::set_recv_key(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.recv_key)
  recv_key_.Mutable(index)->assign(std::move(value));
}
#endif
void RunGraphRequest::set_recv_key(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  recv_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RunGraphRequest.recv_key)
}
void RunGraphRequest::set_recv_key(int index, const char* value, size_t size) {
  recv_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunGraphRequest.recv_key)
}
::std::string* RunGraphRequest::add_recv_key() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RunGraphRequest.recv_key)
  return recv_key_.Add();
}
void RunGraphRequest::add_recv_key(const ::std::string& value) {
  recv_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RunGraphRequest.recv_key)
}
#if LANG_CXX11
void RunGraphRequest::add_recv_key(::std::string&& value) {
  recv_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.RunGraphRequest.recv_key)
}
#endif
void RunGraphRequest::add_recv_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  recv_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RunGraphRequest.recv_key)
}
void RunGraphRequest::add_recv_key(const char* value, size_t size) {
  recv_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RunGraphRequest.recv_key)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RunGraphRequest::recv_key() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunGraphRequest.recv_key)
  return recv_key_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RunGraphRequest::mutable_recv_key() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunGraphRequest.recv_key)
  return &recv_key_;
}

// bool is_partial = 6;
void RunGraphRequest::clear_is_partial() {
  is_partial_ = false;
}
bool RunGraphRequest::is_partial() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.is_partial)
  return is_partial_;
}
void RunGraphRequest::set_is_partial(bool value) {
  
  is_partial_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.is_partial)
}

// bool is_last_partial_run = 7;
void RunGraphRequest::clear_is_last_partial_run() {
  is_last_partial_run_ = false;
}
bool RunGraphRequest::is_last_partial_run() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.is_last_partial_run)
  return is_last_partial_run_;
}
void RunGraphRequest::set_is_last_partial_run(bool value) {
  
  is_last_partial_run_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.is_last_partial_run)
}

// bool store_errors_in_response_body = 9;
void RunGraphRequest::clear_store_errors_in_response_body() {
  store_errors_in_response_body_ = false;
}
bool RunGraphRequest::store_errors_in_response_body() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.store_errors_in_response_body)
  return store_errors_in_response_body_;
}
void RunGraphRequest::set_store_errors_in_response_body(bool value) {
  
  store_errors_in_response_body_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.store_errors_in_response_body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunGraphResponse::_slow_mutable_step_stats() {
  step_stats_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
      GetArenaNoVirtual());
}
::tensorflow::StepStats* RunGraphResponse::_slow_release_step_stats() {
  if (step_stats_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::StepStats* temp = new ::tensorflow::StepStats(*step_stats_);
    step_stats_ = NULL;
    return temp;
  }
}
::tensorflow::StepStats* RunGraphResponse::unsafe_arena_release_step_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphResponse.step_stats)
  
  ::tensorflow::StepStats* temp = step_stats_;
  step_stats_ = NULL;
  return temp;
}
void RunGraphResponse::_slow_set_allocated_step_stats(
    ::google::protobuf::Arena* message_arena, ::tensorflow::StepStats** step_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*step_stats) == NULL) {
      message_arena->Own(*step_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*step_stats)) {
      ::tensorflow::StepStats* new_step_stats = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
            message_arena);
      new_step_stats->CopyFrom(**step_stats);
      *step_stats = new_step_stats;
    }
}
void RunGraphResponse::unsafe_arena_set_allocated_step_stats(
    ::tensorflow::StepStats* step_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete step_stats_;
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphResponse.step_stats)
}
void RunGraphResponse::_slow_mutable_cost_graph() {
  cost_graph_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::CostGraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::CostGraphDef* RunGraphResponse::_slow_release_cost_graph() {
  if (cost_graph_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::CostGraphDef* temp = new ::tensorflow::CostGraphDef(*cost_graph_);
    cost_graph_ = NULL;
    return temp;
  }
}
::tensorflow::CostGraphDef* RunGraphResponse::unsafe_arena_release_cost_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphResponse.cost_graph)
  
  ::tensorflow::CostGraphDef* temp = cost_graph_;
  cost_graph_ = NULL;
  return temp;
}
void RunGraphResponse::_slow_set_allocated_cost_graph(
    ::google::protobuf::Arena* message_arena, ::tensorflow::CostGraphDef** cost_graph) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*cost_graph) == NULL) {
      message_arena->Own(*cost_graph);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*cost_graph)) {
      ::tensorflow::CostGraphDef* new_cost_graph = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::CostGraphDef >(
            message_arena);
      new_cost_graph->CopyFrom(**cost_graph);
      *cost_graph = new_cost_graph;
    }
}
void RunGraphResponse::unsafe_arena_set_allocated_cost_graph(
    ::tensorflow::CostGraphDef* cost_graph) {
  if (GetArenaNoVirtual() == NULL) {
    delete cost_graph_;
  }
  cost_graph_ = cost_graph;
  if (cost_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphResponse.cost_graph)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunGraphResponse::kRecvFieldNumber;
const int RunGraphResponse::kStepStatsFieldNumber;
const int RunGraphResponse::kCostGraphFieldNumber;
const int RunGraphResponse::kPartitionGraphFieldNumber;
const int RunGraphResponse::kStatusCodeFieldNumber;
const int RunGraphResponse::kStatusErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunGraphResponse::RunGraphResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunGraphResponse)
}
RunGraphResponse::RunGraphResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  recv_(arena),
  partition_graph_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunGraphResponse)
}
RunGraphResponse::RunGraphResponse(const RunGraphResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      recv_(from.recv_),
      partition_graph_(from.partition_graph_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status_error_message().size() > 0) {
    status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_error_message(),
      GetArenaNoVirtual());
  }
  if (from.has_step_stats()) {
    step_stats_ = new ::tensorflow::StepStats(*from.step_stats_);
  } else {
    step_stats_ = NULL;
  }
  if (from.has_cost_graph()) {
    cost_graph_ = new ::tensorflow::CostGraphDef(*from.cost_graph_);
  } else {
    cost_graph_ = NULL;
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunGraphResponse)
}

void RunGraphResponse::SharedCtor() {
  status_error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&step_stats_)) + sizeof(status_code_));
  _cached_size_ = 0;
}

RunGraphResponse::~RunGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RunGraphResponse)
  SharedDtor();
}

void RunGraphResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  status_error_message_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete step_stats_;
  if (this != internal_default_instance()) delete cost_graph_;
}

void RunGraphResponse::ArenaDtor(void* object) {
  RunGraphResponse* _this = reinterpret_cast< RunGraphResponse* >(object);
  (void)_this;
}
void RunGraphResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunGraphResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunGraphResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RunGraphResponse& RunGraphResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

RunGraphResponse* RunGraphResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunGraphResponse>(arena);
}

void RunGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recv_.Clear();
  partition_graph_.Clear();
  status_error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) {
    delete step_stats_;
  }
  step_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && cost_graph_ != NULL) {
    delete cost_graph_;
  }
  cost_graph_ = NULL;
  status_code_ = 0;
  _internal_metadata_.Clear();
}

bool RunGraphResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunGraphResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.NamedTensorProto recv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.StepStats step_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.CostGraphDef cost_graph = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.GraphDef partition_graph = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partition_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.error.Code status_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::tensorflow::error::Code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status_error_message = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status_error_message().data(), static_cast<int>(this->status_error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphResponse.status_error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunGraphResponse)
  return false;
#undef DO_
}

void RunGraphResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto recv = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recv_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recv(static_cast<int>(i)), output);
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->step_stats_, output);
  }

  // .tensorflow.CostGraphDef cost_graph = 3;
  if (this->has_cost_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cost_graph_, output);
  }

  // repeated .tensorflow.GraphDef partition_graph = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partition_graph_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partition_graph(static_cast<int>(i)), output);
  }

  // .tensorflow.error.Code status_code = 5;
  if (this->status_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status_code(), output);
  }

  // string status_error_message = 6;
  if (this->status_error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_error_message().data(), static_cast<int>(this->status_error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphResponse.status_error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->status_error_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RunGraphResponse)
}

::google::protobuf::uint8* RunGraphResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto recv = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recv_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->recv(static_cast<int>(i)), deterministic, target);
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->step_stats_, deterministic, target);
  }

  // .tensorflow.CostGraphDef cost_graph = 3;
  if (this->has_cost_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cost_graph_, deterministic, target);
  }

  // repeated .tensorflow.GraphDef partition_graph = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partition_graph_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->partition_graph(static_cast<int>(i)), deterministic, target);
  }

  // .tensorflow.error.Code status_code = 5;
  if (this->status_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status_code(), target);
  }

  // string status_error_message = 6;
  if (this->status_error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_error_message().data(), static_cast<int>(this->status_error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphResponse.status_error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->status_error_message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunGraphResponse)
  return target;
}

size_t RunGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunGraphResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.NamedTensorProto recv = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->recv_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recv(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.GraphDef partition_graph = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->partition_graph_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_graph(static_cast<int>(i)));
    }
  }

  // string status_error_message = 6;
  if (this->status_error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status_error_message());
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->step_stats_);
  }

  // .tensorflow.CostGraphDef cost_graph = 3;
  if (this->has_cost_graph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cost_graph_);
  }

  // .tensorflow.error.Code status_code = 5;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunGraphResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunGraphResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunGraphResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunGraphResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunGraphResponse)
    MergeFrom(*source);
  }
}

void RunGraphResponse::MergeFrom(const RunGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recv_.MergeFrom(from.recv_);
  partition_graph_.MergeFrom(from.partition_graph_);
  if (from.status_error_message().size() > 0) {
    set_status_error_message(from.status_error_message());
  }
  if (from.has_step_stats()) {
    mutable_step_stats()->::tensorflow::StepStats::MergeFrom(from.step_stats());
  }
  if (from.has_cost_graph()) {
    mutable_cost_graph()->::tensorflow::CostGraphDef::MergeFrom(from.cost_graph());
  }
  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void RunGraphResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunGraphResponse::CopyFrom(const RunGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunGraphResponse::IsInitialized() const {
  return true;
}

void RunGraphResponse::Swap(RunGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunGraphResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RunGraphResponse::UnsafeArenaSwap(RunGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunGraphResponse::InternalSwap(RunGraphResponse* other) {
  using std::swap;
  recv_.InternalSwap(&other->recv_);
  partition_graph_.InternalSwap(&other->partition_graph_);
  status_error_message_.Swap(&other->status_error_message_);
  swap(step_stats_, other->step_stats_);
  swap(cost_graph_, other->cost_graph_);
  swap(status_code_, other->status_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunGraphResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunGraphResponse

// repeated .tensorflow.NamedTensorProto recv = 1;
int RunGraphResponse::recv_size() const {
  return recv_.size();
}
void RunGraphResponse::clear_recv() {
  recv_.Clear();
}
const ::tensorflow::NamedTensorProto& RunGraphResponse::recv(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.recv)
  return recv_.Get(index);
}
::tensorflow::NamedTensorProto* RunGraphResponse::mutable_recv(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.recv)
  return recv_.Mutable(index);
}
::tensorflow::NamedTensorProto* RunGraphResponse::add_recv() {
  // @@protoc_insertion_point(field_add:tensorflow.RunGraphResponse.recv)
  return recv_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
RunGraphResponse::mutable_recv() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunGraphResponse.recv)
  return &recv_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
RunGraphResponse::recv() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunGraphResponse.recv)
  return recv_;
}

// .tensorflow.StepStats step_stats = 2;
bool RunGraphResponse::has_step_stats() const {
  return this != internal_default_instance() && step_stats_ != NULL;
}
void RunGraphResponse::clear_step_stats() {
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) delete step_stats_;
  step_stats_ = NULL;
}
const ::tensorflow::StepStats& RunGraphResponse::step_stats() const {
  const ::tensorflow::StepStats* p = step_stats_;
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.step_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::StepStats*>(
      &::tensorflow::_StepStats_default_instance_);
}
::tensorflow::StepStats* RunGraphResponse::mutable_step_stats() {
  
  if (step_stats_ == NULL) {
    _slow_mutable_step_stats();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.step_stats)
  return step_stats_;
}
::tensorflow::StepStats* RunGraphResponse::release_step_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphResponse.step_stats)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_step_stats();
  } else {
    ::tensorflow::StepStats* temp = step_stats_;
    step_stats_ = NULL;
    return temp;
  }
}
 void RunGraphResponse::set_allocated_step_stats(::tensorflow::StepStats* step_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete step_stats_;
  }
  if (step_stats != NULL) {
    _slow_set_allocated_step_stats(message_arena, &step_stats);
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphResponse.step_stats)
}

// .tensorflow.CostGraphDef cost_graph = 3;
bool RunGraphResponse::has_cost_graph() const {
  return this != internal_default_instance() && cost_graph_ != NULL;
}
void RunGraphResponse::clear_cost_graph() {
  if (GetArenaNoVirtual() == NULL && cost_graph_ != NULL) delete cost_graph_;
  cost_graph_ = NULL;
}
const ::tensorflow::CostGraphDef& RunGraphResponse::cost_graph() const {
  const ::tensorflow::CostGraphDef* p = cost_graph_;
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.cost_graph)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::CostGraphDef*>(
      &::tensorflow::_CostGraphDef_default_instance_);
}
::tensorflow::CostGraphDef* RunGraphResponse::mutable_cost_graph() {
  
  if (cost_graph_ == NULL) {
    _slow_mutable_cost_graph();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.cost_graph)
  return cost_graph_;
}
::tensorflow::CostGraphDef* RunGraphResponse::release_cost_graph() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphResponse.cost_graph)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cost_graph();
  } else {
    ::tensorflow::CostGraphDef* temp = cost_graph_;
    cost_graph_ = NULL;
    return temp;
  }
}
 void RunGraphResponse::set_allocated_cost_graph(::tensorflow::CostGraphDef* cost_graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cost_graph_;
  }
  if (cost_graph != NULL) {
    _slow_set_allocated_cost_graph(message_arena, &cost_graph);
  }
  cost_graph_ = cost_graph;
  if (cost_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphResponse.cost_graph)
}

// repeated .tensorflow.GraphDef partition_graph = 4;
int RunGraphResponse::partition_graph_size() const {
  return partition_graph_.size();
}
void RunGraphResponse::clear_partition_graph() {
  partition_graph_.Clear();
}
const ::tensorflow::GraphDef& RunGraphResponse::partition_graph(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.partition_graph)
  return partition_graph_.Get(index);
}
::tensorflow::GraphDef* RunGraphResponse::mutable_partition_graph(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.partition_graph)
  return partition_graph_.Mutable(index);
}
::tensorflow::GraphDef* RunGraphResponse::add_partition_graph() {
  // @@protoc_insertion_point(field_add:tensorflow.RunGraphResponse.partition_graph)
  return partition_graph_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >*
RunGraphResponse::mutable_partition_graph() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunGraphResponse.partition_graph)
  return &partition_graph_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >&
RunGraphResponse::partition_graph() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunGraphResponse.partition_graph)
  return partition_graph_;
}

// .tensorflow.error.Code status_code = 5;
void RunGraphResponse::clear_status_code() {
  status_code_ = 0;
}
::tensorflow::error::Code RunGraphResponse::status_code() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.status_code)
  return static_cast< ::tensorflow::error::Code >(status_code_);
}
void RunGraphResponse::set_status_code(::tensorflow::error::Code value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphResponse.status_code)
}

// string status_error_message = 6;
void RunGraphResponse::clear_status_error_message() {
  status_error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RunGraphResponse::status_error_message() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.status_error_message)
  return status_error_message_.Get();
}
void RunGraphResponse::set_status_error_message(const ::std::string& value) {
  
  status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphResponse.status_error_message)
}
#if LANG_CXX11
void RunGraphResponse::set_status_error_message(::std::string&& value) {
  
  status_error_message_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.RunGraphResponse.status_error_message)
}
#endif
void RunGraphResponse::set_status_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunGraphResponse.status_error_message)
}
void RunGraphResponse::set_status_error_message(const char* value,
    size_t size) {
  
  status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunGraphResponse.status_error_message)
}
::std::string* RunGraphResponse::mutable_status_error_message() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.status_error_message)
  return status_error_message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunGraphResponse::release_status_error_message() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphResponse.status_error_message)
  
  return status_error_message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RunGraphResponse::unsafe_arena_release_status_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphResponse.status_error_message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return status_error_message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RunGraphResponse::set_allocated_status_error_message(::std::string* status_error_message) {
  if (status_error_message != NULL) {
    
  } else {
    
  }
  status_error_message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_error_message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphResponse.status_error_message)
}
void RunGraphResponse::unsafe_arena_set_allocated_status_error_message(
    ::std::string* status_error_message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (status_error_message != NULL) {
    
  } else {
    
  }
  status_error_message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      status_error_message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphResponse.status_error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanupGraphRequest::kStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupGraphRequest::CleanupGraphRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupGraphRequest)
}
CleanupGraphRequest::CleanupGraphRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupGraphRequest)
}
CleanupGraphRequest::CleanupGraphRequest(const CleanupGraphRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupGraphRequest)
}

void CleanupGraphRequest::SharedCtor() {
  step_id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CleanupGraphRequest::~CleanupGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupGraphRequest)
  SharedDtor();
}

void CleanupGraphRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void CleanupGraphRequest::ArenaDtor(void* object) {
  CleanupGraphRequest* _this = reinterpret_cast< CleanupGraphRequest* >(object);
  (void)_this;
}
void CleanupGraphRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CleanupGraphRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupGraphRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CleanupGraphRequest& CleanupGraphRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CleanupGraphRequest* CleanupGraphRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CleanupGraphRequest>(arena);
}

void CleanupGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool CleanupGraphRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupGraphRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupGraphRequest)
  return false;
#undef DO_
}

void CleanupGraphRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupGraphRequest)
}

::google::protobuf::uint8* CleanupGraphRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupGraphRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupGraphRequest)
  return target;
}

size_t CleanupGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupGraphRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupGraphRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupGraphRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupGraphRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupGraphRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupGraphRequest)
    MergeFrom(*source);
  }
}

void CleanupGraphRequest::MergeFrom(const CleanupGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void CleanupGraphRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupGraphRequest::CopyFrom(const CleanupGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupGraphRequest::IsInitialized() const {
  return true;
}

void CleanupGraphRequest::Swap(CleanupGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupGraphRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CleanupGraphRequest::UnsafeArenaSwap(CleanupGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupGraphRequest::InternalSwap(CleanupGraphRequest* other) {
  using std::swap;
  swap(step_id_, other->step_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupGraphRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupGraphRequest

// int64 step_id = 1;
void CleanupGraphRequest::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CleanupGraphRequest::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.CleanupGraphRequest.step_id)
  return step_id_;
}
void CleanupGraphRequest::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CleanupGraphRequest.step_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupGraphResponse::CleanupGraphResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupGraphResponse)
}
CleanupGraphResponse::CleanupGraphResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupGraphResponse)
}
CleanupGraphResponse::CleanupGraphResponse(const CleanupGraphResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupGraphResponse)
}

void CleanupGraphResponse::SharedCtor() {
  _cached_size_ = 0;
}

CleanupGraphResponse::~CleanupGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupGraphResponse)
  SharedDtor();
}

void CleanupGraphResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void CleanupGraphResponse::ArenaDtor(void* object) {
  CleanupGraphResponse* _this = reinterpret_cast< CleanupGraphResponse* >(object);
  (void)_this;
}
void CleanupGraphResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CleanupGraphResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupGraphResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CleanupGraphResponse& CleanupGraphResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

CleanupGraphResponse* CleanupGraphResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CleanupGraphResponse>(arena);
}

void CleanupGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CleanupGraphResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupGraphResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupGraphResponse)
  return false;
#undef DO_
}

void CleanupGraphResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupGraphResponse)
}

::google::protobuf::uint8* CleanupGraphResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupGraphResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupGraphResponse)
  return target;
}

size_t CleanupGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupGraphResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupGraphResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupGraphResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupGraphResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupGraphResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupGraphResponse)
    MergeFrom(*source);
  }
}

void CleanupGraphResponse::MergeFrom(const CleanupGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CleanupGraphResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupGraphResponse::CopyFrom(const CleanupGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupGraphResponse::IsInitialized() const {
  return true;
}

void CleanupGraphResponse::Swap(CleanupGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupGraphResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CleanupGraphResponse::UnsafeArenaSwap(CleanupGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupGraphResponse::InternalSwap(CleanupGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupGraphResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupGraphResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RecvTensorRequest::_slow_mutable_client_locality() {
  client_locality_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
      GetArenaNoVirtual());
}
::tensorflow::DeviceLocality* RecvTensorRequest::_slow_release_client_locality() {
  if (client_locality_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DeviceLocality* temp = new ::tensorflow::DeviceLocality(*client_locality_);
    client_locality_ = NULL;
    return temp;
  }
}
::tensorflow::DeviceLocality* RecvTensorRequest::unsafe_arena_release_client_locality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorRequest.client_locality)
  
  ::tensorflow::DeviceLocality* temp = client_locality_;
  client_locality_ = NULL;
  return temp;
}
void RecvTensorRequest::_slow_set_allocated_client_locality(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DeviceLocality** client_locality) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*client_locality) == NULL) {
      message_arena->Own(*client_locality);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*client_locality)) {
      ::tensorflow::DeviceLocality* new_client_locality = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
            message_arena);
      new_client_locality->CopyFrom(**client_locality);
      *client_locality = new_client_locality;
    }
}
void RecvTensorRequest::unsafe_arena_set_allocated_client_locality(
    ::tensorflow::DeviceLocality* client_locality) {
  if (GetArenaNoVirtual() == NULL) {
    delete client_locality_;
  }
  client_locality_ = client_locality;
  if (client_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.client_locality)
}
void RecvTensorRequest::_slow_mutable_server_locality() {
  server_locality_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
      GetArenaNoVirtual());
}
::tensorflow::DeviceLocality* RecvTensorRequest::_slow_release_server_locality() {
  if (server_locality_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DeviceLocality* temp = new ::tensorflow::DeviceLocality(*server_locality_);
    server_locality_ = NULL;
    return temp;
  }
}
::tensorflow::DeviceLocality* RecvTensorRequest::unsafe_arena_release_server_locality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorRequest.server_locality)
  
  ::tensorflow::DeviceLocality* temp = server_locality_;
  server_locality_ = NULL;
  return temp;
}
void RecvTensorRequest::_slow_set_allocated_server_locality(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DeviceLocality** server_locality) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*server_locality) == NULL) {
      message_arena->Own(*server_locality);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*server_locality)) {
      ::tensorflow::DeviceLocality* new_server_locality = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
            message_arena);
      new_server_locality->CopyFrom(**server_locality);
      *server_locality = new_server_locality;
    }
}
void RecvTensorRequest::unsafe_arena_set_allocated_server_locality(
    ::tensorflow::DeviceLocality* server_locality) {
  if (GetArenaNoVirtual() == NULL) {
    delete server_locality_;
  }
  server_locality_ = server_locality;
  if (server_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.server_locality)
}
void RecvTensorRequest::_slow_mutable_transport_options() {
  transport_options_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
}
::google::protobuf::Any* RecvTensorRequest::_slow_release_transport_options() {
  if (transport_options_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Any* temp = new ::google::protobuf::Any(*transport_options_);
    transport_options_ = NULL;
    return temp;
  }
}
::google::protobuf::Any* RecvTensorRequest::unsafe_arena_release_transport_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorRequest.transport_options)
  
  ::google::protobuf::Any* temp = transport_options_;
  transport_options_ = NULL;
  return temp;
}
void RecvTensorRequest::unsafe_arena_set_allocated_transport_options(
    ::google::protobuf::Any* transport_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.transport_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvTensorRequest::kStepIdFieldNumber;
const int RecvTensorRequest::kRendezvousKeyFieldNumber;
const int RecvTensorRequest::kDmaOkFieldNumber;
const int RecvTensorRequest::kClientLocalityFieldNumber;
const int RecvTensorRequest::kServerLocalityFieldNumber;
const int RecvTensorRequest::kTransportOptionsFieldNumber;
const int RecvTensorRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvTensorRequest::RecvTensorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvTensorRequest)
}
RecvTensorRequest::RecvTensorRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvTensorRequest)
}
RecvTensorRequest::RecvTensorRequest(const RecvTensorRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rendezvous_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rendezvous_key().size() > 0) {
    rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rendezvous_key(),
      GetArenaNoVirtual());
  }
  if (from.has_client_locality()) {
    client_locality_ = new ::tensorflow::DeviceLocality(*from.client_locality_);
  } else {
    client_locality_ = NULL;
  }
  if (from.has_server_locality()) {
    server_locality_ = new ::tensorflow::DeviceLocality(*from.server_locality_);
  } else {
    server_locality_ = NULL;
  }
  if (from.has_transport_options()) {
    transport_options_ = new ::google::protobuf::Any(*from.transport_options_);
  } else {
    transport_options_ = NULL;
  }
  ::memcpy(&step_id_, &from.step_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dma_ok_) -
    reinterpret_cast<char*>(&step_id_)) + sizeof(dma_ok_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvTensorRequest)
}

void RecvTensorRequest::SharedCtor() {
  rendezvous_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_locality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dma_ok_) -
      reinterpret_cast<char*>(&client_locality_)) + sizeof(dma_ok_));
  _cached_size_ = 0;
}

RecvTensorRequest::~RecvTensorRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvTensorRequest)
  SharedDtor();
}

void RecvTensorRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  rendezvous_key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete client_locality_;
  if (this != internal_default_instance()) delete server_locality_;
  if (this != internal_default_instance()) delete transport_options_;
}

void RecvTensorRequest::ArenaDtor(void* object) {
  RecvTensorRequest* _this = reinterpret_cast< RecvTensorRequest* >(object);
  (void)_this;
}
void RecvTensorRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecvTensorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvTensorRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecvTensorRequest& RecvTensorRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecvTensorRequest* RecvTensorRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecvTensorRequest>(arena);
}

void RecvTensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvTensorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rendezvous_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && client_locality_ != NULL) {
    delete client_locality_;
  }
  client_locality_ = NULL;
  if (GetArenaNoVirtual() == NULL && server_locality_ != NULL) {
    delete server_locality_;
  }
  server_locality_ = NULL;
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) {
    delete transport_options_;
  }
  transport_options_ = NULL;
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dma_ok_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(dma_ok_));
  _internal_metadata_.Clear();
}

bool RecvTensorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvTensorRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rendezvous_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rendezvous_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rendezvous_key().data(), static_cast<int>(this->rendezvous_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RecvTensorRequest.rendezvous_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dma_ok = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dma_ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DeviceLocality client_locality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DeviceLocality server_locality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any transport_options = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 request_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvTensorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvTensorRequest)
  return false;
#undef DO_
}

void RecvTensorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvTensorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string rendezvous_key = 2;
  if (this->rendezvous_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rendezvous_key().data(), static_cast<int>(this->rendezvous_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvTensorRequest.rendezvous_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rendezvous_key(), output);
  }

  // bool dma_ok = 3;
  if (this->dma_ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dma_ok(), output);
  }

  // .tensorflow.DeviceLocality client_locality = 4;
  if (this->has_client_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->client_locality_, output);
  }

  // .tensorflow.DeviceLocality server_locality = 5;
  if (this->has_server_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->server_locality_, output);
  }

  // .google.protobuf.Any transport_options = 6;
  if (this->has_transport_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->transport_options_, output);
  }

  // int64 request_id = 7;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->request_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RecvTensorRequest)
}

::google::protobuf::uint8* RecvTensorRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvTensorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string rendezvous_key = 2;
  if (this->rendezvous_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rendezvous_key().data(), static_cast<int>(this->rendezvous_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvTensorRequest.rendezvous_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rendezvous_key(), target);
  }

  // bool dma_ok = 3;
  if (this->dma_ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dma_ok(), target);
  }

  // .tensorflow.DeviceLocality client_locality = 4;
  if (this->has_client_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->client_locality_, deterministic, target);
  }

  // .tensorflow.DeviceLocality server_locality = 5;
  if (this->has_server_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->server_locality_, deterministic, target);
  }

  // .google.protobuf.Any transport_options = 6;
  if (this->has_transport_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->transport_options_, deterministic, target);
  }

  // int64 request_id = 7;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->request_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvTensorRequest)
  return target;
}

size_t RecvTensorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvTensorRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string rendezvous_key = 2;
  if (this->rendezvous_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rendezvous_key());
  }

  // .tensorflow.DeviceLocality client_locality = 4;
  if (this->has_client_locality()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_locality_);
  }

  // .tensorflow.DeviceLocality server_locality = 5;
  if (this->has_server_locality()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_locality_);
  }

  // .google.protobuf.Any transport_options = 6;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transport_options_);
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int64 request_id = 7;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // bool dma_ok = 3;
  if (this->dma_ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvTensorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvTensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvTensorRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecvTensorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvTensorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvTensorRequest)
    MergeFrom(*source);
  }
}

void RecvTensorRequest::MergeFrom(const RecvTensorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvTensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rendezvous_key().size() > 0) {
    set_rendezvous_key(from.rendezvous_key());
  }
  if (from.has_client_locality()) {
    mutable_client_locality()->::tensorflow::DeviceLocality::MergeFrom(from.client_locality());
  }
  if (from.has_server_locality()) {
    mutable_server_locality()->::tensorflow::DeviceLocality::MergeFrom(from.server_locality());
  }
  if (from.has_transport_options()) {
    mutable_transport_options()->::google::protobuf::Any::MergeFrom(from.transport_options());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.dma_ok() != 0) {
    set_dma_ok(from.dma_ok());
  }
}

void RecvTensorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTensorRequest::CopyFrom(const RecvTensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTensorRequest::IsInitialized() const {
  return true;
}

void RecvTensorRequest::Swap(RecvTensorRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvTensorRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecvTensorRequest::UnsafeArenaSwap(RecvTensorRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvTensorRequest::InternalSwap(RecvTensorRequest* other) {
  using std::swap;
  rendezvous_key_.Swap(&other->rendezvous_key_);
  swap(client_locality_, other->client_locality_);
  swap(server_locality_, other->server_locality_);
  swap(transport_options_, other->transport_options_);
  swap(step_id_, other->step_id_);
  swap(request_id_, other->request_id_);
  swap(dma_ok_, other->dma_ok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecvTensorRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvTensorRequest

// int64 step_id = 1;
void RecvTensorRequest::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RecvTensorRequest::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.step_id)
  return step_id_;
}
void RecvTensorRequest::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorRequest.step_id)
}

// string rendezvous_key = 2;
void RecvTensorRequest::clear_rendezvous_key() {
  rendezvous_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RecvTensorRequest::rendezvous_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.rendezvous_key)
  return rendezvous_key_.Get();
}
void RecvTensorRequest::set_rendezvous_key(const ::std::string& value) {
  
  rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorRequest.rendezvous_key)
}
#if LANG_CXX11
void RecvTensorRequest::set_rendezvous_key(::std::string&& value) {
  
  rendezvous_key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.RecvTensorRequest.rendezvous_key)
}
#endif
void RecvTensorRequest::set_rendezvous_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RecvTensorRequest.rendezvous_key)
}
void RecvTensorRequest::set_rendezvous_key(const char* value,
    size_t size) {
  
  rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RecvTensorRequest.rendezvous_key)
}
::std::string* RecvTensorRequest::mutable_rendezvous_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorRequest.rendezvous_key)
  return rendezvous_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RecvTensorRequest::release_rendezvous_key() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorRequest.rendezvous_key)
  
  return rendezvous_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RecvTensorRequest::unsafe_arena_release_rendezvous_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorRequest.rendezvous_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return rendezvous_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RecvTensorRequest::set_allocated_rendezvous_key(::std::string* rendezvous_key) {
  if (rendezvous_key != NULL) {
    
  } else {
    
  }
  rendezvous_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rendezvous_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorRequest.rendezvous_key)
}
void RecvTensorRequest::unsafe_arena_set_allocated_rendezvous_key(
    ::std::string* rendezvous_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (rendezvous_key != NULL) {
    
  } else {
    
  }
  rendezvous_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      rendezvous_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.rendezvous_key)
}

// bool dma_ok = 3;
void RecvTensorRequest::clear_dma_ok() {
  dma_ok_ = false;
}
bool RecvTensorRequest::dma_ok() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.dma_ok)
  return dma_ok_;
}
void RecvTensorRequest::set_dma_ok(bool value) {
  
  dma_ok_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorRequest.dma_ok)
}

// .tensorflow.DeviceLocality client_locality = 4;
bool RecvTensorRequest::has_client_locality() const {
  return this != internal_default_instance() && client_locality_ != NULL;
}
void RecvTensorRequest::clear_client_locality() {
  if (GetArenaNoVirtual() == NULL && client_locality_ != NULL) delete client_locality_;
  client_locality_ = NULL;
}
const ::tensorflow::DeviceLocality& RecvTensorRequest::client_locality() const {
  const ::tensorflow::DeviceLocality* p = client_locality_;
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.client_locality)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::DeviceLocality*>(
      &::tensorflow::_DeviceLocality_default_instance_);
}
::tensorflow::DeviceLocality* RecvTensorRequest::mutable_client_locality() {
  
  if (client_locality_ == NULL) {
    _slow_mutable_client_locality();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorRequest.client_locality)
  return client_locality_;
}
::tensorflow::DeviceLocality* RecvTensorRequest::release_client_locality() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorRequest.client_locality)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_client_locality();
  } else {
    ::tensorflow::DeviceLocality* temp = client_locality_;
    client_locality_ = NULL;
    return temp;
  }
}
 void RecvTensorRequest::set_allocated_client_locality(::tensorflow::DeviceLocality* client_locality) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_locality_;
  }
  if (client_locality != NULL) {
    _slow_set_allocated_client_locality(message_arena, &client_locality);
  }
  client_locality_ = client_locality;
  if (client_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorRequest.client_locality)
}

// .tensorflow.DeviceLocality server_locality = 5;
bool RecvTensorRequest::has_server_locality() const {
  return this != internal_default_instance() && server_locality_ != NULL;
}
void RecvTensorRequest::clear_server_locality() {
  if (GetArenaNoVirtual() == NULL && server_locality_ != NULL) delete server_locality_;
  server_locality_ = NULL;
}
const ::tensorflow::DeviceLocality& RecvTensorRequest::server_locality() const {
  const ::tensorflow::DeviceLocality* p = server_locality_;
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.server_locality)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::DeviceLocality*>(
      &::tensorflow::_DeviceLocality_default_instance_);
}
::tensorflow::DeviceLocality* RecvTensorRequest::mutable_server_locality() {
  
  if (server_locality_ == NULL) {
    _slow_mutable_server_locality();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorRequest.server_locality)
  return server_locality_;
}
::tensorflow::DeviceLocality* RecvTensorRequest::release_server_locality() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorRequest.server_locality)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_server_locality();
  } else {
    ::tensorflow::DeviceLocality* temp = server_locality_;
    server_locality_ = NULL;
    return temp;
  }
}
 void RecvTensorRequest::set_allocated_server_locality(::tensorflow::DeviceLocality* server_locality) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_locality_;
  }
  if (server_locality != NULL) {
    _slow_set_allocated_server_locality(message_arena, &server_locality);
  }
  server_locality_ = server_locality;
  if (server_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorRequest.server_locality)
}

// .google.protobuf.Any transport_options = 6;
bool RecvTensorRequest::has_transport_options() const {
  return this != internal_default_instance() && transport_options_ != NULL;
}
void RecvTensorRequest::clear_transport_options() {
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;
}
const ::google::protobuf::Any& RecvTensorRequest::transport_options() const {
  const ::google::protobuf::Any* p = transport_options_;
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.transport_options)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
::google::protobuf::Any* RecvTensorRequest::mutable_transport_options() {
  
  if (transport_options_ == NULL) {
    _slow_mutable_transport_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorRequest.transport_options)
  return transport_options_;
}
::google::protobuf::Any* RecvTensorRequest::release_transport_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorRequest.transport_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transport_options();
  } else {
    ::google::protobuf::Any* temp = transport_options_;
    transport_options_ = NULL;
    return temp;
  }
}
 void RecvTensorRequest::set_allocated_transport_options(::google::protobuf::Any* transport_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_options_;
  }
  if (transport_options != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(transport_options);
    }
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorRequest.transport_options)
}

// int64 request_id = 7;
void RecvTensorRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RecvTensorRequest::request_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.request_id)
  return request_id_;
}
void RecvTensorRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RecvTensorResponse::_slow_mutable_tensor() {
  tensor_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorProto* RecvTensorResponse::_slow_release_tensor() {
  if (tensor_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorProto* temp = new ::tensorflow::TensorProto(*tensor_);
    tensor_ = NULL;
    return temp;
  }
}
::tensorflow::TensorProto* RecvTensorResponse::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorResponse.tensor)
  
  ::tensorflow::TensorProto* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
void RecvTensorResponse::_slow_set_allocated_tensor(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorProto** tensor) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*tensor) == NULL) {
      message_arena->Own(*tensor);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*tensor)) {
      ::tensorflow::TensorProto* new_tensor = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
            message_arena);
      new_tensor->CopyFrom(**tensor);
      *tensor = new_tensor;
    }
}
void RecvTensorResponse::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorProto* tensor) {
  if (GetArenaNoVirtual() == NULL) {
    delete tensor_;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorResponse.tensor)
}
void RecvTensorResponse::_slow_mutable_transport_options() {
  transport_options_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
}
::google::protobuf::Any* RecvTensorResponse::_slow_release_transport_options() {
  if (transport_options_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Any* temp = new ::google::protobuf::Any(*transport_options_);
    transport_options_ = NULL;
    return temp;
  }
}
::google::protobuf::Any* RecvTensorResponse::unsafe_arena_release_transport_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorResponse.transport_options)
  
  ::google::protobuf::Any* temp = transport_options_;
  transport_options_ = NULL;
  return temp;
}
void RecvTensorResponse::unsafe_arena_set_allocated_transport_options(
    ::google::protobuf::Any* transport_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorResponse.transport_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvTensorResponse::kTensorFieldNumber;
const int RecvTensorResponse::kIsDeadFieldNumber;
const int RecvTensorResponse::kSendStartMicrosFieldNumber;
const int RecvTensorResponse::kTransportOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvTensorResponse::RecvTensorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvTensorResponse)
}
RecvTensorResponse::RecvTensorResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvTensorResponse)
}
RecvTensorResponse::RecvTensorResponse(const RecvTensorResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor()) {
    tensor_ = new ::tensorflow::TensorProto(*from.tensor_);
  } else {
    tensor_ = NULL;
  }
  if (from.has_transport_options()) {
    transport_options_ = new ::google::protobuf::Any(*from.transport_options_);
  } else {
    transport_options_ = NULL;
  }
  ::memcpy(&send_start_micros_, &from.send_start_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dead_) -
    reinterpret_cast<char*>(&send_start_micros_)) + sizeof(is_dead_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvTensorResponse)
}

void RecvTensorResponse::SharedCtor() {
  ::memset(&tensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dead_) -
      reinterpret_cast<char*>(&tensor_)) + sizeof(is_dead_));
  _cached_size_ = 0;
}

RecvTensorResponse::~RecvTensorResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvTensorResponse)
  SharedDtor();
}

void RecvTensorResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete tensor_;
  if (this != internal_default_instance()) delete transport_options_;
}

void RecvTensorResponse::ArenaDtor(void* object) {
  RecvTensorResponse* _this = reinterpret_cast< RecvTensorResponse* >(object);
  (void)_this;
}
void RecvTensorResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecvTensorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvTensorResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecvTensorResponse& RecvTensorResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecvTensorResponse* RecvTensorResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecvTensorResponse>(arena);
}

void RecvTensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvTensorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) {
    delete tensor_;
  }
  tensor_ = NULL;
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) {
    delete transport_options_;
  }
  transport_options_ = NULL;
  ::memset(&send_start_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dead_) -
      reinterpret_cast<char*>(&send_start_micros_)) + sizeof(is_dead_));
  _internal_metadata_.Clear();
}

bool RecvTensorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvTensorResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TensorProto tensor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dead = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 send_start_micros = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_start_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any transport_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvTensorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvTensorResponse)
  return false;
#undef DO_
}

void RecvTensorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvTensorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_, output);
  }

  // bool is_dead = 2;
  if (this->is_dead() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_dead(), output);
  }

  // int64 send_start_micros = 3;
  if (this->send_start_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->send_start_micros(), output);
  }

  // .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->transport_options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RecvTensorResponse)
}

::google::protobuf::uint8* RecvTensorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvTensorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_, deterministic, target);
  }

  // bool is_dead = 2;
  if (this->is_dead() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_dead(), target);
  }

  // int64 send_start_micros = 3;
  if (this->send_start_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->send_start_micros(), target);
  }

  // .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->transport_options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvTensorResponse)
  return target;
}

size_t RecvTensorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvTensorResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_);
  }

  // .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transport_options_);
  }

  // int64 send_start_micros = 3;
  if (this->send_start_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_start_micros());
  }

  // bool is_dead = 2;
  if (this->is_dead() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvTensorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvTensorResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecvTensorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvTensorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvTensorResponse)
    MergeFrom(*source);
  }
}

void RecvTensorResponse::MergeFrom(const RecvTensorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorProto::MergeFrom(from.tensor());
  }
  if (from.has_transport_options()) {
    mutable_transport_options()->::google::protobuf::Any::MergeFrom(from.transport_options());
  }
  if (from.send_start_micros() != 0) {
    set_send_start_micros(from.send_start_micros());
  }
  if (from.is_dead() != 0) {
    set_is_dead(from.is_dead());
  }
}

void RecvTensorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTensorResponse::CopyFrom(const RecvTensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTensorResponse::IsInitialized() const {
  return true;
}

void RecvTensorResponse::Swap(RecvTensorResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvTensorResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecvTensorResponse::UnsafeArenaSwap(RecvTensorResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvTensorResponse::InternalSwap(RecvTensorResponse* other) {
  using std::swap;
  swap(tensor_, other->tensor_);
  swap(transport_options_, other->transport_options_);
  swap(send_start_micros_, other->send_start_micros_);
  swap(is_dead_, other->is_dead_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecvTensorResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvTensorResponse

// .tensorflow.TensorProto tensor = 1;
bool RecvTensorResponse::has_tensor() const {
  return this != internal_default_instance() && tensor_ != NULL;
}
void RecvTensorResponse::clear_tensor() {
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) delete tensor_;
  tensor_ = NULL;
}
const ::tensorflow::TensorProto& RecvTensorResponse::tensor() const {
  const ::tensorflow::TensorProto* p = tensor_;
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorResponse.tensor)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorProto*>(
      &::tensorflow::_TensorProto_default_instance_);
}
::tensorflow::TensorProto* RecvTensorResponse::mutable_tensor() {
  
  if (tensor_ == NULL) {
    _slow_mutable_tensor();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorResponse.tensor)
  return tensor_;
}
::tensorflow::TensorProto* RecvTensorResponse::release_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorResponse.tensor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_tensor();
  } else {
    ::tensorflow::TensorProto* temp = tensor_;
    tensor_ = NULL;
    return temp;
  }
}
 void RecvTensorResponse::set_allocated_tensor(::tensorflow::TensorProto* tensor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tensor_;
  }
  if (tensor != NULL) {
    _slow_set_allocated_tensor(message_arena, &tensor);
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorResponse.tensor)
}

// bool is_dead = 2;
void RecvTensorResponse::clear_is_dead() {
  is_dead_ = false;
}
bool RecvTensorResponse::is_dead() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorResponse.is_dead)
  return is_dead_;
}
void RecvTensorResponse::set_is_dead(bool value) {
  
  is_dead_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorResponse.is_dead)
}

// int64 send_start_micros = 3;
void RecvTensorResponse::clear_send_start_micros() {
  send_start_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RecvTensorResponse::send_start_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorResponse.send_start_micros)
  return send_start_micros_;
}
void RecvTensorResponse::set_send_start_micros(::google::protobuf::int64 value) {
  
  send_start_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorResponse.send_start_micros)
}

// .google.protobuf.Any transport_options = 4;
bool RecvTensorResponse::has_transport_options() const {
  return this != internal_default_instance() && transport_options_ != NULL;
}
void RecvTensorResponse::clear_transport_options() {
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;
}
const ::google::protobuf::Any& RecvTensorResponse::transport_options() const {
  const ::google::protobuf::Any* p = transport_options_;
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorResponse.transport_options)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
::google::protobuf::Any* RecvTensorResponse::mutable_transport_options() {
  
  if (transport_options_ == NULL) {
    _slow_mutable_transport_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorResponse.transport_options)
  return transport_options_;
}
::google::protobuf::Any* RecvTensorResponse::release_transport_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorResponse.transport_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transport_options();
  } else {
    ::google::protobuf::Any* temp = transport_options_;
    transport_options_ = NULL;
    return temp;
  }
}
 void RecvTensorResponse::set_allocated_transport_options(::google::protobuf::Any* transport_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_options_;
  }
  if (transport_options != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(transport_options);
    }
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorResponse.transport_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggingRequest::kRpcLoggingFieldNumber;
const int LoggingRequest::kClearFieldNumber;
const int LoggingRequest::kFetchStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggingRequest::LoggingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LoggingRequest)
}
LoggingRequest::LoggingRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  fetch_step_id_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LoggingRequest)
}
LoggingRequest::LoggingRequest(const LoggingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fetch_step_id_(from.fetch_step_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rpc_logging_, &from.rpc_logging_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_) -
    reinterpret_cast<char*>(&rpc_logging_)) + sizeof(clear_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.LoggingRequest)
}

void LoggingRequest::SharedCtor() {
  ::memset(&rpc_logging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_) -
      reinterpret_cast<char*>(&rpc_logging_)) + sizeof(clear_));
  _cached_size_ = 0;
}

LoggingRequest::~LoggingRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.LoggingRequest)
  SharedDtor();
}

void LoggingRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void LoggingRequest::ArenaDtor(void* object) {
  LoggingRequest* _this = reinterpret_cast< LoggingRequest* >(object);
  (void)_this;
}
void LoggingRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoggingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggingRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoggingRequest& LoggingRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoggingRequest* LoggingRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoggingRequest>(arena);
}

void LoggingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LoggingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fetch_step_id_.Clear();
  ::memset(&rpc_logging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_) -
      reinterpret_cast<char*>(&rpc_logging_)) + sizeof(clear_));
  _internal_metadata_.Clear();
}

bool LoggingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LoggingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool rpc_logging = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rpc_logging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool clear = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 fetch_step_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fetch_step_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_fetch_step_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LoggingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LoggingRequest)
  return false;
#undef DO_
}

void LoggingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LoggingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rpc_logging = 1;
  if (this->rpc_logging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rpc_logging(), output);
  }

  // bool clear = 2;
  if (this->clear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clear(), output);
  }

  // repeated int64 fetch_step_id = 3;
  if (this->fetch_step_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fetch_step_id_cached_byte_size_));
  }
  for (int i = 0, n = this->fetch_step_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->fetch_step_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.LoggingRequest)
}

::google::protobuf::uint8* LoggingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LoggingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rpc_logging = 1;
  if (this->rpc_logging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rpc_logging(), target);
  }

  // bool clear = 2;
  if (this->clear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clear(), target);
  }

  // repeated int64 fetch_step_id = 3;
  if (this->fetch_step_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fetch_step_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->fetch_step_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LoggingRequest)
  return target;
}

size_t LoggingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LoggingRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 fetch_step_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->fetch_step_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fetch_step_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool rpc_logging = 1;
  if (this->rpc_logging() != 0) {
    total_size += 1 + 1;
  }

  // bool clear = 2;
  if (this->clear() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LoggingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LoggingRequest)
    MergeFrom(*source);
  }
}

void LoggingRequest::MergeFrom(const LoggingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fetch_step_id_.MergeFrom(from.fetch_step_id_);
  if (from.rpc_logging() != 0) {
    set_rpc_logging(from.rpc_logging());
  }
  if (from.clear() != 0) {
    set_clear(from.clear());
  }
}

void LoggingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingRequest::CopyFrom(const LoggingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingRequest::IsInitialized() const {
  return true;
}

void LoggingRequest::Swap(LoggingRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoggingRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LoggingRequest::UnsafeArenaSwap(LoggingRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoggingRequest::InternalSwap(LoggingRequest* other) {
  using std::swap;
  fetch_step_id_.InternalSwap(&other->fetch_step_id_);
  swap(rpc_logging_, other->rpc_logging_);
  swap(clear_, other->clear_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoggingRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggingRequest

// bool rpc_logging = 1;
void LoggingRequest::clear_rpc_logging() {
  rpc_logging_ = false;
}
bool LoggingRequest::rpc_logging() const {
  // @@protoc_insertion_point(field_get:tensorflow.LoggingRequest.rpc_logging)
  return rpc_logging_;
}
void LoggingRequest::set_rpc_logging(bool value) {
  
  rpc_logging_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LoggingRequest.rpc_logging)
}

// bool clear = 2;
void LoggingRequest::clear_clear() {
  clear_ = false;
}
bool LoggingRequest::clear() const {
  // @@protoc_insertion_point(field_get:tensorflow.LoggingRequest.clear)
  return clear_;
}
void LoggingRequest::set_clear(bool value) {
  
  clear_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LoggingRequest.clear)
}

// repeated int64 fetch_step_id = 3;
int LoggingRequest::fetch_step_id_size() const {
  return fetch_step_id_.size();
}
void LoggingRequest::clear_fetch_step_id() {
  fetch_step_id_.Clear();
}
::google::protobuf::int64 LoggingRequest::fetch_step_id(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.LoggingRequest.fetch_step_id)
  return fetch_step_id_.Get(index);
}
void LoggingRequest::set_fetch_step_id(int index, ::google::protobuf::int64 value) {
  fetch_step_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.LoggingRequest.fetch_step_id)
}
void LoggingRequest::add_fetch_step_id(::google::protobuf::int64 value) {
  fetch_step_id_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.LoggingRequest.fetch_step_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LoggingRequest::fetch_step_id() const {
  // @@protoc_insertion_point(field_list:tensorflow.LoggingRequest.fetch_step_id)
  return fetch_step_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LoggingRequest::mutable_fetch_step_id() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.LoggingRequest.fetch_step_id)
  return &fetch_step_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void LabeledStepStats::_slow_mutable_step_stats() {
  step_stats_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
      GetArenaNoVirtual());
}
::tensorflow::StepStats* LabeledStepStats::_slow_release_step_stats() {
  if (step_stats_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::StepStats* temp = new ::tensorflow::StepStats(*step_stats_);
    step_stats_ = NULL;
    return temp;
  }
}
::tensorflow::StepStats* LabeledStepStats::unsafe_arena_release_step_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.LabeledStepStats.step_stats)
  
  ::tensorflow::StepStats* temp = step_stats_;
  step_stats_ = NULL;
  return temp;
}
void LabeledStepStats::_slow_set_allocated_step_stats(
    ::google::protobuf::Arena* message_arena, ::tensorflow::StepStats** step_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*step_stats) == NULL) {
      message_arena->Own(*step_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*step_stats)) {
      ::tensorflow::StepStats* new_step_stats = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
            message_arena);
      new_step_stats->CopyFrom(**step_stats);
      *step_stats = new_step_stats;
    }
}
void LabeledStepStats::unsafe_arena_set_allocated_step_stats(
    ::tensorflow::StepStats* step_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete step_stats_;
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.LabeledStepStats.step_stats)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabeledStepStats::kStepIdFieldNumber;
const int LabeledStepStats::kStepStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabeledStepStats::LabeledStepStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LabeledStepStats)
}
LabeledStepStats::LabeledStepStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LabeledStepStats)
}
LabeledStepStats::LabeledStepStats(const LabeledStepStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_step_stats()) {
    step_stats_ = new ::tensorflow::StepStats(*from.step_stats_);
  } else {
    step_stats_ = NULL;
  }
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.LabeledStepStats)
}

void LabeledStepStats::SharedCtor() {
  ::memset(&step_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_id_) -
      reinterpret_cast<char*>(&step_stats_)) + sizeof(step_id_));
  _cached_size_ = 0;
}

LabeledStepStats::~LabeledStepStats() {
  // @@protoc_insertion_point(destructor:tensorflow.LabeledStepStats)
  SharedDtor();
}

void LabeledStepStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete step_stats_;
}

void LabeledStepStats::ArenaDtor(void* object) {
  LabeledStepStats* _this = reinterpret_cast< LabeledStepStats* >(object);
  (void)_this;
}
void LabeledStepStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LabeledStepStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabeledStepStats::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabeledStepStats& LabeledStepStats::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabeledStepStats* LabeledStepStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LabeledStepStats>(arena);
}

void LabeledStepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LabeledStepStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) {
    delete step_stats_;
  }
  step_stats_ = NULL;
  step_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool LabeledStepStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LabeledStepStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.StepStats step_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LabeledStepStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LabeledStepStats)
  return false;
#undef DO_
}

void LabeledStepStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LabeledStepStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->step_stats_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.LabeledStepStats)
}

::google::protobuf::uint8* LabeledStepStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LabeledStepStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->step_stats_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LabeledStepStats)
  return target;
}

size_t LabeledStepStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LabeledStepStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->step_stats_);
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabeledStepStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LabeledStepStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LabeledStepStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabeledStepStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LabeledStepStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LabeledStepStats)
    MergeFrom(*source);
  }
}

void LabeledStepStats::MergeFrom(const LabeledStepStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LabeledStepStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_step_stats()) {
    mutable_step_stats()->::tensorflow::StepStats::MergeFrom(from.step_stats());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void LabeledStepStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LabeledStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledStepStats::CopyFrom(const LabeledStepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LabeledStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledStepStats::IsInitialized() const {
  return true;
}

void LabeledStepStats::Swap(LabeledStepStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LabeledStepStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LabeledStepStats::UnsafeArenaSwap(LabeledStepStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LabeledStepStats::InternalSwap(LabeledStepStats* other) {
  using std::swap;
  swap(step_stats_, other->step_stats_);
  swap(step_id_, other->step_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabeledStepStats::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabeledStepStats

// int64 step_id = 1;
void LabeledStepStats::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LabeledStepStats::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.LabeledStepStats.step_id)
  return step_id_;
}
void LabeledStepStats::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LabeledStepStats.step_id)
}

// .tensorflow.StepStats step_stats = 2;
bool LabeledStepStats::has_step_stats() const {
  return this != internal_default_instance() && step_stats_ != NULL;
}
void LabeledStepStats::clear_step_stats() {
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) delete step_stats_;
  step_stats_ = NULL;
}
const ::tensorflow::StepStats& LabeledStepStats::step_stats() const {
  const ::tensorflow::StepStats* p = step_stats_;
  // @@protoc_insertion_point(field_get:tensorflow.LabeledStepStats.step_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::StepStats*>(
      &::tensorflow::_StepStats_default_instance_);
}
::tensorflow::StepStats* LabeledStepStats::mutable_step_stats() {
  
  if (step_stats_ == NULL) {
    _slow_mutable_step_stats();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.LabeledStepStats.step_stats)
  return step_stats_;
}
::tensorflow::StepStats* LabeledStepStats::release_step_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.LabeledStepStats.step_stats)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_step_stats();
  } else {
    ::tensorflow::StepStats* temp = step_stats_;
    step_stats_ = NULL;
    return temp;
  }
}
 void LabeledStepStats::set_allocated_step_stats(::tensorflow::StepStats* step_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete step_stats_;
  }
  if (step_stats != NULL) {
    _slow_set_allocated_step_stats(message_arena, &step_stats);
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.LabeledStepStats.step_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggingResponse::kStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggingResponse::LoggingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LoggingResponse)
}
LoggingResponse::LoggingResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  step_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LoggingResponse)
}
LoggingResponse::LoggingResponse(const LoggingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      step_(from.step_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.LoggingResponse)
}

void LoggingResponse::SharedCtor() {
  _cached_size_ = 0;
}

LoggingResponse::~LoggingResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.LoggingResponse)
  SharedDtor();
}

void LoggingResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void LoggingResponse::ArenaDtor(void* object) {
  LoggingResponse* _this = reinterpret_cast< LoggingResponse* >(object);
  (void)_this;
}
void LoggingResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoggingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggingResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoggingResponse& LoggingResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoggingResponse* LoggingResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoggingResponse>(arena);
}

void LoggingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LoggingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_.Clear();
  _internal_metadata_.Clear();
}

bool LoggingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LoggingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.LabeledStepStats step = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LoggingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LoggingResponse)
  return false;
#undef DO_
}

void LoggingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LoggingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.LabeledStepStats step = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->step_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->step(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.LoggingResponse)
}

::google::protobuf::uint8* LoggingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LoggingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.LabeledStepStats step = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->step_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->step(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LoggingResponse)
  return target;
}

size_t LoggingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LoggingResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.LabeledStepStats step = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->step_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->step(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LoggingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LoggingResponse)
    MergeFrom(*source);
  }
}

void LoggingResponse::MergeFrom(const LoggingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  step_.MergeFrom(from.step_);
}

void LoggingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingResponse::CopyFrom(const LoggingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingResponse::IsInitialized() const {
  return true;
}

void LoggingResponse::Swap(LoggingResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoggingResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LoggingResponse::UnsafeArenaSwap(LoggingResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoggingResponse::InternalSwap(LoggingResponse* other) {
  using std::swap;
  step_.InternalSwap(&other->step_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoggingResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggingResponse

// repeated .tensorflow.LabeledStepStats step = 1;
int LoggingResponse::step_size() const {
  return step_.size();
}
void LoggingResponse::clear_step() {
  step_.Clear();
}
const ::tensorflow::LabeledStepStats& LoggingResponse::step(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.LoggingResponse.step)
  return step_.Get(index);
}
::tensorflow::LabeledStepStats* LoggingResponse::mutable_step(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.LoggingResponse.step)
  return step_.Mutable(index);
}
::tensorflow::LabeledStepStats* LoggingResponse::add_step() {
  // @@protoc_insertion_point(field_add:tensorflow.LoggingResponse.step)
  return step_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::LabeledStepStats >*
LoggingResponse::mutable_step() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.LoggingResponse.step)
  return &step_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::LabeledStepStats >&
LoggingResponse::step() const {
  // @@protoc_insertion_point(field_list:tensorflow.LoggingResponse.step)
  return step_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceOpts::kDurationFieldNumber;
const int TraceOpts::kUseStepProfilerFieldNumber;
const int TraceOpts::kUseKernelProfilerFieldNumber;
const int TraceOpts::kUseExtendedProfilerFieldNumber;
const int TraceOpts::kUseGpuProfilerFieldNumber;
const int TraceOpts::kUseSampleProfilerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceOpts::TraceOpts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TraceOpts)
}
TraceOpts::TraceOpts(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TraceOpts)
}
TraceOpts::TraceOpts(const TraceOpts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_sample_profiler_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(use_sample_profiler_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.TraceOpts)
}

void TraceOpts::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_sample_profiler_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(use_sample_profiler_));
  _cached_size_ = 0;
}

TraceOpts::~TraceOpts() {
  // @@protoc_insertion_point(destructor:tensorflow.TraceOpts)
  SharedDtor();
}

void TraceOpts::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void TraceOpts::ArenaDtor(void* object) {
  TraceOpts* _this = reinterpret_cast< TraceOpts* >(object);
  (void)_this;
}
void TraceOpts::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TraceOpts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceOpts::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TraceOpts& TraceOpts::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

TraceOpts* TraceOpts::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TraceOpts>(arena);
}

void TraceOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TraceOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_sample_profiler_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(use_sample_profiler_));
  _internal_metadata_.Clear();
}

bool TraceOpts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TraceOpts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_step_profiler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_step_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_kernel_profiler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_kernel_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_extended_profiler = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_extended_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_gpu_profiler = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_gpu_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_sample_profiler = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sample_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TraceOpts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TraceOpts)
  return false;
#undef DO_
}

void TraceOpts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TraceOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double duration = 1;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->duration(), output);
  }

  // bool use_step_profiler = 2;
  if (this->use_step_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_step_profiler(), output);
  }

  // bool use_kernel_profiler = 3;
  if (this->use_kernel_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_kernel_profiler(), output);
  }

  // bool use_extended_profiler = 4;
  if (this->use_extended_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_extended_profiler(), output);
  }

  // bool use_gpu_profiler = 5;
  if (this->use_gpu_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_gpu_profiler(), output);
  }

  // bool use_sample_profiler = 6;
  if (this->use_sample_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_sample_profiler(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TraceOpts)
}

::google::protobuf::uint8* TraceOpts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TraceOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double duration = 1;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->duration(), target);
  }

  // bool use_step_profiler = 2;
  if (this->use_step_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_step_profiler(), target);
  }

  // bool use_kernel_profiler = 3;
  if (this->use_kernel_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_kernel_profiler(), target);
  }

  // bool use_extended_profiler = 4;
  if (this->use_extended_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_extended_profiler(), target);
  }

  // bool use_gpu_profiler = 5;
  if (this->use_gpu_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_gpu_profiler(), target);
  }

  // bool use_sample_profiler = 6;
  if (this->use_sample_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_sample_profiler(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TraceOpts)
  return target;
}

size_t TraceOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TraceOpts)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double duration = 1;
  if (this->duration() != 0) {
    total_size += 1 + 8;
  }

  // bool use_step_profiler = 2;
  if (this->use_step_profiler() != 0) {
    total_size += 1 + 1;
  }

  // bool use_kernel_profiler = 3;
  if (this->use_kernel_profiler() != 0) {
    total_size += 1 + 1;
  }

  // bool use_extended_profiler = 4;
  if (this->use_extended_profiler() != 0) {
    total_size += 1 + 1;
  }

  // bool use_gpu_profiler = 5;
  if (this->use_gpu_profiler() != 0) {
    total_size += 1 + 1;
  }

  // bool use_sample_profiler = 6;
  if (this->use_sample_profiler() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceOpts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TraceOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceOpts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceOpts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TraceOpts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TraceOpts)
    MergeFrom(*source);
  }
}

void TraceOpts::MergeFrom(const TraceOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TraceOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.use_step_profiler() != 0) {
    set_use_step_profiler(from.use_step_profiler());
  }
  if (from.use_kernel_profiler() != 0) {
    set_use_kernel_profiler(from.use_kernel_profiler());
  }
  if (from.use_extended_profiler() != 0) {
    set_use_extended_profiler(from.use_extended_profiler());
  }
  if (from.use_gpu_profiler() != 0) {
    set_use_gpu_profiler(from.use_gpu_profiler());
  }
  if (from.use_sample_profiler() != 0) {
    set_use_sample_profiler(from.use_sample_profiler());
  }
}

void TraceOpts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TraceOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceOpts::CopyFrom(const TraceOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TraceOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceOpts::IsInitialized() const {
  return true;
}

void TraceOpts::Swap(TraceOpts* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TraceOpts* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TraceOpts::UnsafeArenaSwap(TraceOpts* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TraceOpts::InternalSwap(TraceOpts* other) {
  using std::swap;
  swap(duration_, other->duration_);
  swap(use_step_profiler_, other->use_step_profiler_);
  swap(use_kernel_profiler_, other->use_kernel_profiler_);
  swap(use_extended_profiler_, other->use_extended_profiler_);
  swap(use_gpu_profiler_, other->use_gpu_profiler_);
  swap(use_sample_profiler_, other->use_sample_profiler_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceOpts::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceOpts

// double duration = 1;
void TraceOpts::clear_duration() {
  duration_ = 0;
}
double TraceOpts::duration() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.duration)
  return duration_;
}
void TraceOpts::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.duration)
}

// bool use_step_profiler = 2;
void TraceOpts::clear_use_step_profiler() {
  use_step_profiler_ = false;
}
bool TraceOpts::use_step_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_step_profiler)
  return use_step_profiler_;
}
void TraceOpts::set_use_step_profiler(bool value) {
  
  use_step_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_step_profiler)
}

// bool use_kernel_profiler = 3;
void TraceOpts::clear_use_kernel_profiler() {
  use_kernel_profiler_ = false;
}
bool TraceOpts::use_kernel_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_kernel_profiler)
  return use_kernel_profiler_;
}
void TraceOpts::set_use_kernel_profiler(bool value) {
  
  use_kernel_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_kernel_profiler)
}

// bool use_extended_profiler = 4;
void TraceOpts::clear_use_extended_profiler() {
  use_extended_profiler_ = false;
}
bool TraceOpts::use_extended_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_extended_profiler)
  return use_extended_profiler_;
}
void TraceOpts::set_use_extended_profiler(bool value) {
  
  use_extended_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_extended_profiler)
}

// bool use_gpu_profiler = 5;
void TraceOpts::clear_use_gpu_profiler() {
  use_gpu_profiler_ = false;
}
bool TraceOpts::use_gpu_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_gpu_profiler)
  return use_gpu_profiler_;
}
void TraceOpts::set_use_gpu_profiler(bool value) {
  
  use_gpu_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_gpu_profiler)
}

// bool use_sample_profiler = 6;
void TraceOpts::clear_use_sample_profiler() {
  use_sample_profiler_ = false;
}
bool TraceOpts::use_sample_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_sample_profiler)
  return use_sample_profiler_;
}
void TraceOpts::set_use_sample_profiler(bool value) {
  
  use_sample_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_sample_profiler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void TracingRequest::_slow_mutable_options() {
  options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TraceOpts >(
      GetArenaNoVirtual());
}
::tensorflow::TraceOpts* TracingRequest::_slow_release_options() {
  if (options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TraceOpts* temp = new ::tensorflow::TraceOpts(*options_);
    options_ = NULL;
    return temp;
  }
}
::tensorflow::TraceOpts* TracingRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TracingRequest.options)
  
  ::tensorflow::TraceOpts* temp = options_;
  options_ = NULL;
  return temp;
}
void TracingRequest::_slow_set_allocated_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TraceOpts** options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*options) == NULL) {
      message_arena->Own(*options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*options)) {
      ::tensorflow::TraceOpts* new_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TraceOpts >(
            message_arena);
      new_options->CopyFrom(**options);
      *options = new_options;
    }
}
void TracingRequest::unsafe_arena_set_allocated_options(
    ::tensorflow::TraceOpts* options) {
  if (GetArenaNoVirtual() == NULL) {
    delete options_;
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TracingRequest.options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TracingRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TracingRequest::TracingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TracingRequest)
}
TracingRequest::TracingRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TracingRequest)
}
TracingRequest::TracingRequest(const TracingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_options()) {
    options_ = new ::tensorflow::TraceOpts(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TracingRequest)
}

void TracingRequest::SharedCtor() {
  options_ = NULL;
  _cached_size_ = 0;
}

TracingRequest::~TracingRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.TracingRequest)
  SharedDtor();
}

void TracingRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete options_;
}

void TracingRequest::ArenaDtor(void* object) {
  TracingRequest* _this = reinterpret_cast< TracingRequest* >(object);
  (void)_this;
}
void TracingRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TracingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TracingRequest::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TracingRequest& TracingRequest::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

TracingRequest* TracingRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TracingRequest>(arena);
}

void TracingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TracingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && options_ != NULL) {
    delete options_;
  }
  options_ = NULL;
  _internal_metadata_.Clear();
}

bool TracingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TracingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TraceOpts options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TracingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TracingRequest)
  return false;
#undef DO_
}

void TracingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TracingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TraceOpts options = 1;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TracingRequest)
}

::google::protobuf::uint8* TracingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TracingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TraceOpts options = 1;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TracingRequest)
  return target;
}

size_t TracingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TracingRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.TraceOpts options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TracingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TracingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TracingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TracingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TracingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TracingRequest)
    MergeFrom(*source);
  }
}

void TracingRequest::MergeFrom(const TracingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TracingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    mutable_options()->::tensorflow::TraceOpts::MergeFrom(from.options());
  }
}

void TracingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TracingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracingRequest::CopyFrom(const TracingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TracingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingRequest::IsInitialized() const {
  return true;
}

void TracingRequest::Swap(TracingRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TracingRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TracingRequest::UnsafeArenaSwap(TracingRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TracingRequest::InternalSwap(TracingRequest* other) {
  using std::swap;
  swap(options_, other->options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TracingRequest::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TracingRequest

// .tensorflow.TraceOpts options = 1;
bool TracingRequest::has_options() const {
  return this != internal_default_instance() && options_ != NULL;
}
void TracingRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
const ::tensorflow::TraceOpts& TracingRequest::options() const {
  const ::tensorflow::TraceOpts* p = options_;
  // @@protoc_insertion_point(field_get:tensorflow.TracingRequest.options)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TraceOpts*>(
      &::tensorflow::_TraceOpts_default_instance_);
}
::tensorflow::TraceOpts* TracingRequest::mutable_options() {
  
  if (options_ == NULL) {
    _slow_mutable_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TracingRequest.options)
  return options_;
}
::tensorflow::TraceOpts* TracingRequest::release_options() {
  // @@protoc_insertion_point(field_release:tensorflow.TracingRequest.options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_options();
  } else {
    ::tensorflow::TraceOpts* temp = options_;
    options_ = NULL;
    return temp;
  }
}
 void TracingRequest::set_allocated_options(::tensorflow::TraceOpts* options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete options_;
  }
  if (options != NULL) {
    _slow_set_allocated_options(message_arena, &options);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TracingRequest.options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TracingResponse::TracingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TracingResponse)
}
TracingResponse::TracingResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TracingResponse)
}
TracingResponse::TracingResponse(const TracingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TracingResponse)
}

void TracingResponse::SharedCtor() {
  _cached_size_ = 0;
}

TracingResponse::~TracingResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.TracingResponse)
  SharedDtor();
}

void TracingResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void TracingResponse::ArenaDtor(void* object) {
  TracingResponse* _this = reinterpret_cast< TracingResponse* >(object);
  (void)_this;
}
void TracingResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TracingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TracingResponse::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TracingResponse& TracingResponse::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::InitDefaults();
  return *internal_default_instance();
}

TracingResponse* TracingResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TracingResponse>(arena);
}

void TracingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TracingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TracingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TracingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TracingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TracingResponse)
  return false;
#undef DO_
}

void TracingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TracingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TracingResponse)
}

::google::protobuf::uint8* TracingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TracingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TracingResponse)
  return target;
}

size_t TracingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TracingResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TracingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TracingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TracingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TracingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TracingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TracingResponse)
    MergeFrom(*source);
  }
}

void TracingResponse::MergeFrom(const TracingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TracingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TracingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TracingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracingResponse::CopyFrom(const TracingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TracingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingResponse::IsInitialized() const {
  return true;
}

void TracingResponse::Swap(TracingResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TracingResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TracingResponse::UnsafeArenaSwap(TracingResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TracingResponse::InternalSwap(TracingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TracingResponse::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TracingResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
